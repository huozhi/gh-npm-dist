{"version":3,"sources":["../../../trace/report/to-json.ts"],"sourcesContent":["import { randomBytes } from 'crypto'\nimport { traceGlobals } from '../shared'\nimport fs from 'fs'\nimport path from 'path'\nimport { PHASE_DEVELOPMENT_SERVER } from '../../shared/lib/constants'\n\nconst localEndpoint = {\n  serviceName: 'nextjs',\n  ipv4: '127.0.0.1',\n  port: 9411,\n}\n\ntype Event = {\n  traceId: string\n  parentId?: number\n  name: string\n  id: number\n  timestamp: number\n  duration: number\n  localEndpoint?: typeof localEndpoint\n  tags?: Object\n}\n\n// Batch events as zipkin allows for multiple events to be sent in one go\nexport function batcher(reportEvents: (evts: Event[]) => Promise<void>) {\n  const events: Event[] = []\n  // Promise queue to ensure events are always sent on flushAll\n  const queue = new Set()\n  return {\n    flushAll: async () => {\n      await Promise.all(queue)\n      if (events.length > 0) {\n        await reportEvents(events)\n        events.length = 0\n      }\n    },\n    report: (event: Event) => {\n      events.push(event)\n\n      if (events.length > 100) {\n        const evts = events.slice()\n        events.length = 0\n        const report = reportEvents(evts)\n        queue.add(report)\n        report.then(() => queue.delete(report))\n      }\n    },\n  }\n}\n\nlet writeStream: RotatingWriteStream\nlet traceId: string\nlet batch: ReturnType<typeof batcher> | undefined\n\nconst writeStreamOptions = {\n  flags: 'a',\n  encoding: 'utf8',\n}\nclass RotatingWriteStream {\n  file: string\n  writeStream!: fs.WriteStream\n  size: number\n  sizeLimit: number\n  private rotatePromise: Promise<void> | undefined\n  private drainPromise: Promise<void> | undefined\n  constructor(file: string, sizeLimit: number) {\n    this.file = file\n    this.size = 0\n    this.sizeLimit = sizeLimit\n    this.createWriteStream()\n  }\n  private createWriteStream() {\n    this.writeStream = fs.createWriteStream(this.file, writeStreamOptions)\n  }\n  // Recreate the file\n  private async rotate() {\n    await this.end()\n    try {\n      fs.unlinkSync(this.file)\n    } catch (err: any) {\n      // It's fine if the file does not exist yet\n      if (err.code !== 'ENOENT') {\n        throw err\n      }\n    }\n    this.size = 0\n    this.createWriteStream()\n    this.rotatePromise = undefined\n  }\n  async write(data: string): Promise<void> {\n    if (this.rotatePromise) await this.rotatePromise\n\n    this.size += data.length\n    if (this.size > this.sizeLimit) {\n      await (this.rotatePromise = this.rotate())\n    }\n\n    if (!this.writeStream.write(data, 'utf8')) {\n      if (this.drainPromise === undefined) {\n        this.drainPromise = new Promise<void>((resolve, _reject) => {\n          this.writeStream.once('drain', () => {\n            this.drainPromise = undefined\n            resolve()\n          })\n        })\n      }\n      await this.drainPromise\n    }\n  }\n\n  end(): Promise<void> {\n    return new Promise((resolve) => {\n      this.writeStream.end(resolve)\n    })\n  }\n}\n\nconst reportToLocalHost = (\n  name: string,\n  duration: number,\n  timestamp: number,\n  id: number,\n  parentId?: number,\n  attrs?: Object\n) => {\n  const distDir = traceGlobals.get('distDir')\n  const phase = traceGlobals.get('phase')\n  if (!distDir || !phase) {\n    return\n  }\n\n  if (!traceId) {\n    traceId = process.env.TRACE_ID || randomBytes(8).toString('hex')\n  }\n\n  if (!batch) {\n    batch = batcher(async (events) => {\n      if (!writeStream) {\n        await fs.promises.mkdir(distDir, { recursive: true })\n        const file = path.join(distDir, 'trace')\n        writeStream = new RotatingWriteStream(\n          file,\n          // Development is limited to 50MB, production is unlimited\n          phase === PHASE_DEVELOPMENT_SERVER ? 52428800 : Infinity\n        )\n      }\n      const eventsJson = JSON.stringify(events)\n      try {\n        await writeStream.write(eventsJson + '\\n')\n      } catch (err) {\n        console.log(err)\n      }\n    })\n  }\n\n  batch.report({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    tags: attrs,\n  })\n}\n\nexport default {\n  flushAll: () =>\n    batch\n      ? batch.flushAll().then(() => {\n          const phase = traceGlobals.get('phase')\n          // Only end writeStream when manually flushing in production\n          if (phase !== PHASE_DEVELOPMENT_SERVER) {\n            writeStream.end()\n          }\n        })\n      : undefined,\n  report: reportToLocalHost,\n}\n"],"names":["batcher","localEndpoint","serviceName","ipv4","port","reportEvents","events","queue","Set","flushAll","Promise","all","length","report","event","push","evts","slice","add","then","delete","writeStream","traceId","batch","writeStreamOptions","flags","encoding","RotatingWriteStream","file","sizeLimit","size","createWriteStream","rotate","end","unlinkSync","err","code","rotatePromise","undefined","write","data","drainPromise","resolve","_reject","once","reportToLocalHost","name","duration","timestamp","id","parentId","attrs","distDir","get","phase","process","env","TRACE_ID","toString","promises","mkdir","recursive","join","Infinity","eventsJson","JSON","stringify","console","log","tags"],"mappings":";;;;QAwBgBA,OAAO,GAAPA,OAAO;;AAxBK,GAAQ,CAAR,OAAQ;AACP,GAAW,CAAX,OAAW;AACzB,GAAI,CAAJ,GAAI;AACF,GAAM,CAAN,KAAM;AACkB,GAA4B,CAA5B,UAA4B;;;;;;AAErE,KAAK,CAACC,aAAa,GAAG,CAAC;IACrBC,WAAW,EAAE,CAAQ;IACrBC,IAAI,EAAE,CAAW;IACjBC,IAAI,EAAE,IAAI;AACZ,CAAC;SAceJ,OAAO,CAACK,YAA8C,EAAE,CAAC;IACvE,KAAK,CAACC,MAAM,GAAY,CAAC,CAAC;IAC1B,EAA6D,AAA7D,2DAA6D;IAC7D,KAAK,CAACC,KAAK,GAAG,GAAG,CAACC,GAAG;IACrB,MAAM,CAAC,CAAC;QACNC,QAAQ,YAAc,CAAC;YACrB,KAAK,CAACC,OAAO,CAACC,GAAG,CAACJ,KAAK;YACvB,EAAE,EAAED,MAAM,CAACM,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtB,KAAK,CAACP,YAAY,CAACC,MAAM;gBACzBA,MAAM,CAACM,MAAM,GAAG,CAAC;YACnB,CAAC;QACH,CAAC;QACDC,MAAM,GAAGC,KAAY,GAAK,CAAC;YACzBR,MAAM,CAACS,IAAI,CAACD,KAAK;YAEjB,EAAE,EAAER,MAAM,CAACM,MAAM,GAAG,GAAG,EAAE,CAAC;gBACxB,KAAK,CAACI,IAAI,GAAGV,MAAM,CAACW,KAAK;gBACzBX,MAAM,CAACM,MAAM,GAAG,CAAC;gBACjB,KAAK,CAACC,MAAM,GAAGR,YAAY,CAACW,IAAI;gBAChCT,KAAK,CAACW,GAAG,CAACL,MAAM;gBAChBA,MAAM,CAACM,IAAI,KAAOZ,KAAK,CAACa,MAAM,CAACP,MAAM;;YACvC,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAED,GAAG,CAACQ,WAAW;AACf,GAAG,CAACC,OAAO;AACX,GAAG,CAACC,KAAK;AAET,KAAK,CAACC,kBAAkB,GAAG,CAAC;IAC1BC,KAAK,EAAE,CAAG;IACVC,QAAQ,EAAE,CAAM;AAClB,CAAC;MACKC,mBAAmB;gBAOXC,IAAY,EAAEC,SAAiB,CAAE,CAAC;QAC5C,IAAI,CAACD,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACE,IAAI,GAAG,CAAC;QACb,IAAI,CAACD,SAAS,GAAGA,SAAS;QAC1B,IAAI,CAACE,iBAAiB;IACxB,CAAC;IACOA,iBAAiB,GAAG,CAAC;QAC3B,IAAI,CAACV,WAAW,GAtEL,GAAI,SAsEOU,iBAAiB,CAAC,IAAI,CAACH,IAAI,EAAEJ,kBAAkB;IACvE,CAAC;IACD,EAAoB,AAApB,kBAAoB;UACNQ,MAAM,GAAG,CAAC;QACtB,KAAK,CAAC,IAAI,CAACC,GAAG;QACd,GAAG,CAAC,CAAC;YA3EM,GAAI,SA4EVC,UAAU,CAAC,IAAI,CAACN,IAAI;QACzB,CAAC,CAAC,KAAK,EAAEO,GAAG,EAAO,CAAC;YAClB,EAA2C,AAA3C,yCAA2C;YAC3C,EAAE,EAAEA,GAAG,CAACC,IAAI,KAAK,CAAQ,SAAE,CAAC;gBAC1B,KAAK,CAACD,GAAG;YACX,CAAC;QACH,CAAC;QACD,IAAI,CAACL,IAAI,GAAG,CAAC;QACb,IAAI,CAACC,iBAAiB;QACtB,IAAI,CAACM,aAAa,GAAGC,SAAS;IAChC,CAAC;UACKC,KAAK,CAACC,IAAY,EAAiB,CAAC;QACxC,EAAE,EAAE,IAAI,CAACH,aAAa,EAAE,KAAK,CAAC,IAAI,CAACA,aAAa;QAEhD,IAAI,CAACP,IAAI,IAAIU,IAAI,CAAC5B,MAAM;QACxB,EAAE,EAAE,IAAI,CAACkB,IAAI,GAAG,IAAI,CAACD,SAAS,EAAE,CAAC;YAC/B,KAAK,EAAE,IAAI,CAACQ,aAAa,GAAG,IAAI,CAACL,MAAM;QACzC,CAAC;QAED,EAAE,GAAG,IAAI,CAACX,WAAW,CAACkB,KAAK,CAACC,IAAI,EAAE,CAAM,QAAG,CAAC;YAC1C,EAAE,EAAE,IAAI,CAACC,YAAY,KAAKH,SAAS,EAAE,CAAC;gBACpC,IAAI,CAACG,YAAY,GAAG,GAAG,CAAC/B,OAAO,EAAQgC,OAAO,EAAEC,OAAO,GAAK,CAAC;oBAC3D,IAAI,CAACtB,WAAW,CAACuB,IAAI,CAAC,CAAO,YAAQ,CAAC;wBACpC,IAAI,CAACH,YAAY,GAAGH,SAAS;wBAC7BI,OAAO;oBACT,CAAC;gBACH,CAAC;YACH,CAAC;YACD,KAAK,CAAC,IAAI,CAACD,YAAY;QACzB,CAAC;IACH,CAAC;IAEDR,GAAG,GAAkB,CAAC;QACpB,MAAM,CAAC,GAAG,CAACvB,OAAO,EAAEgC,OAAO,GAAK,CAAC;YAC/B,IAAI,CAACrB,WAAW,CAACY,GAAG,CAACS,OAAO;QAC9B,CAAC;IACH,CAAC;;AAGH,KAAK,CAACG,iBAAiB,IACrBC,IAAY,EACZC,QAAgB,EAChBC,SAAiB,EACjBC,EAAU,EACVC,QAAiB,EACjBC,KAAc,GACX,CAAC;IACJ,KAAK,CAACC,OAAO,GA5Hc,OAAW,cA4HTC,GAAG,CAAC,CAAS;IAC1C,KAAK,CAACC,KAAK,GA7HgB,OAAW,cA6HXD,GAAG,CAAC,CAAO;IACtC,EAAE,GAAGD,OAAO,KAAKE,KAAK,EAAE,CAAC;QACvB,MAAM;IACR,CAAC;IAED,EAAE,GAAGhC,OAAO,EAAE,CAAC;QACbA,OAAO,GAAGiC,OAAO,CAACC,GAAG,CAACC,QAAQ,QApIN,OAAQ,cAoIc,CAAC,EAAEC,QAAQ,CAAC,CAAK;IACjE,CAAC;IAED,EAAE,GAAGnC,KAAK,EAAE,CAAC;QACXA,KAAK,GAAGvB,OAAO,QAAQM,MAAM,GAAK,CAAC;YACjC,EAAE,GAAGe,WAAW,EAAE,CAAC;gBACjB,KAAK,CAxIE,GAAI,SAwIFsC,QAAQ,CAACC,KAAK,CAACR,OAAO,EAAE,CAAC;oBAACS,SAAS,EAAE,IAAI;gBAAC,CAAC;gBACpD,KAAK,CAACjC,IAAI,GAxID,KAAM,SAwIGkC,IAAI,CAACV,OAAO,EAAE,CAAO;gBACvC/B,WAAW,GAAG,GAAG,CAACM,mBAAmB,CACnCC,IAAI,EACJ,EAA0D,AAA1D,wDAA0D;gBAC1D0B,KAAK,KA3I0B,UAA4B,4BA2ItB,QAAQ,GAAGS,QAAQ;YAE5D,CAAC;YACD,KAAK,CAACC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAAC5D,MAAM;YACxC,GAAG,CAAC,CAAC;gBACH,KAAK,CAACe,WAAW,CAACkB,KAAK,CAACyB,UAAU,GAAG,CAAI;YAC3C,CAAC,CAAC,KAAK,EAAE7B,GAAG,EAAE,CAAC;gBACbgC,OAAO,CAACC,GAAG,CAACjC,GAAG;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IAEDZ,KAAK,CAACV,MAAM,CAAC,CAAC;QACZS,OAAO;QACP4B,QAAQ;QACRJ,IAAI;QACJG,EAAE;QACFD,SAAS;QACTD,QAAQ;QACRsB,IAAI,EAAElB,KAAK;IACb,CAAC;AACH,CAAC;eAEc,CAAC;IACd1C,QAAQ,MACNc,KAAK,GACDA,KAAK,CAACd,QAAQ,GAAGU,IAAI,KAAO,CAAC;YAC3B,KAAK,CAACmC,KAAK,GAzKQ,OAAW,cAyKHD,GAAG,CAAC,CAAO;YACtC,EAA4D,AAA5D,0DAA4D;YAC5D,EAAE,EAAEC,KAAK,KAxKsB,UAA4B,2BAwKnB,CAAC;gBACvCjC,WAAW,CAACY,GAAG;YACjB,CAAC;QACH,CAAC,IACDK,SAAS;;IACfzB,MAAM,EAAEgC,iBAAiB;AAC3B,CAAC"}