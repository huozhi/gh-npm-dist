{"version":3,"sources":["../../../trace/report/index.ts"],"sourcesContent":["import { SpanId } from '../shared'\nimport reportToTelemetry from './to-telemetry'\nimport reportToJson from './to-json'\n\ntype Reporter = {\n  flushAll: () => Promise<void> | void\n  report: (\n    spanName: string,\n    duration: number,\n    timestamp: number,\n    id: SpanId,\n    parentId?: SpanId,\n    attrs?: Object\n  ) => void\n}\n\nclass MultiReporter implements Reporter {\n  private reporters: Reporter[] = []\n\n  constructor(reporters: Reporter[]) {\n    this.reporters = reporters\n  }\n\n  async flushAll() {\n    await Promise.all(this.reporters.map((reporter) => reporter.flushAll()))\n  }\n\n  report(\n    spanName: string,\n    duration: number,\n    timestamp: number,\n    id: SpanId,\n    parentId?: SpanId,\n    attrs?: Object\n  ) {\n    this.reporters.forEach((reporter) =>\n      reporter.report(spanName, duration, timestamp, id, parentId, attrs)\n    )\n  }\n}\n\n// JSON is always reported to allow for diagnostics\nexport const reporter = new MultiReporter([reportToJson, reportToTelemetry])\n"],"names":["MultiReporter","reporters","flushAll","Promise","all","map","reporter","report","spanName","duration","timestamp","id","parentId","attrs","forEach","reportToJson"],"mappings":";;;;;AAC8B,GAAgB,CAAhB,YAAgB;AACrB,GAAW,CAAX,OAAW;;;;;;MAc9BA,aAAa;gBAGLC,SAAqB,CAAE,CAAC;QAHtC,IAuBC,CAtBSA,SAAS,GAAe,CAAC,CAAC;QAGhC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC;UAEKC,QAAQ,GAAG,CAAC;QAChB,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAACI,GAAG,EAAEC,SAAQ,GAAKA,SAAQ,CAACJ,QAAQ;;IACtE,CAAC;IAEDK,MAAM,CACJC,QAAgB,EAChBC,QAAgB,EAChBC,SAAiB,EACjBC,EAAU,EACVC,QAAiB,EACjBC,KAAc,EACd,CAAC;QACD,IAAI,CAACZ,SAAS,CAACa,OAAO,EAAER,SAAQ,GAC9BA,SAAQ,CAACC,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,EAAE,EAAEC,QAAQ,EAAEC,KAAK;;IAEtE,CAAC;;AAII,KAAK,CAACP,QAAQ,GAAG,GAAG,CAACN,aAAa,CAAC,CAACe;IAxClB,OAAW;IADN,YAAgB;AAyC4B,CAAC;QAA9DT,QAAQ,GAARA,QAAQ"}