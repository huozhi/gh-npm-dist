{"version":3,"sources":["../../server/server-route-utils.ts"],"sourcesContent":["import type {\n  Header,\n  Redirect,\n  Rewrite,\n  RouteType,\n} from '../lib/load-custom-routes'\nimport type { Route } from './router'\nimport type { BaseNextRequest } from './base-http'\nimport type { ParsedUrlQuery } from 'querystring'\n\nimport { getRedirectStatus, modifyRouteRegex } from '../lib/load-custom-routes'\nimport pathMatch from '../shared/lib/router/utils/path-match'\nimport {\n  compileNonPath,\n  prepareDestination,\n} from '../shared/lib/router/utils/prepare-destination'\nimport { getRequestMeta } from './request-meta'\nimport { stringify as stringifyQs } from 'querystring'\nimport { format as formatUrl } from 'url'\nimport { normalizeRepeatedSlashes } from '../shared/lib/utils'\n\nconst getCustomRouteMatcher = pathMatch(true)\n\nexport const getCustomRoute = ({\n  type,\n  rule,\n  restrictedRedirectPaths,\n}: {\n  rule: Rewrite | Redirect | Header\n  type: RouteType\n  restrictedRedirectPaths: string[]\n}) => {\n  const match = getCustomRouteMatcher(\n    rule.source,\n    !(rule as any).internal\n      ? (regex: string) =>\n          modifyRouteRegex(\n            regex,\n            type === 'redirect' ? restrictedRedirectPaths : undefined\n          )\n      : undefined\n  )\n\n  return {\n    ...rule,\n    type,\n    match,\n    name: type,\n    fn: async (_req, _res, _params, _parsedUrl) => ({ finished: false }),\n  } as Route & Rewrite & Header\n}\n\nexport const createHeaderRoute = ({\n  rule,\n  restrictedRedirectPaths,\n}: {\n  rule: Header\n  restrictedRedirectPaths: string[]\n}) => {\n  const headerRoute = getCustomRoute({\n    type: 'header',\n    rule,\n    restrictedRedirectPaths,\n  })\n  return {\n    match: headerRoute.match,\n    has: headerRoute.has,\n    type: headerRoute.type,\n    name: `${headerRoute.type} ${headerRoute.source} header route`,\n    fn: async (_req, res, params, _parsedUrl) => {\n      const hasParams = Object.keys(params).length > 0\n\n      for (const header of (headerRoute as Header).headers) {\n        let { key, value } = header\n        if (hasParams) {\n          key = compileNonPath(key, params)\n          value = compileNonPath(value, params)\n        }\n        res.setHeader(key, value)\n      }\n      return { finished: false }\n    },\n  } as Route\n}\n\nexport const createRedirectRoute = ({\n  rule,\n  restrictedRedirectPaths,\n}: {\n  rule: Redirect\n  restrictedRedirectPaths: string[]\n}) => {\n  const redirectRoute = getCustomRoute({\n    type: 'redirect',\n    rule,\n    restrictedRedirectPaths,\n  })\n  return {\n    internal: redirectRoute.internal,\n    type: redirectRoute.type,\n    match: redirectRoute.match,\n    has: redirectRoute.has,\n    statusCode: redirectRoute.statusCode,\n    name: `Redirect route ${redirectRoute.source}`,\n    fn: async (req, res, params, parsedUrl) => {\n      const { parsedDestination } = prepareDestination({\n        appendParamsToQuery: false,\n        destination: redirectRoute.destination,\n        params: params,\n        query: parsedUrl.query,\n      })\n\n      const { query } = parsedDestination\n      delete (parsedDestination as any).query\n\n      parsedDestination.search = stringifyQuery(req, query)\n\n      let updatedDestination = formatUrl(parsedDestination)\n\n      if (updatedDestination.startsWith('/')) {\n        updatedDestination = normalizeRepeatedSlashes(updatedDestination)\n      }\n\n      res\n        .redirect(\n          updatedDestination,\n          getRedirectStatus(redirectRoute as Redirect)\n        )\n        .body(updatedDestination)\n        .send()\n\n      return {\n        finished: true,\n      }\n    },\n  } as Route\n}\n\n// since initial query values are decoded by querystring.parse\n// we need to re-encode them here but still allow passing through\n// values from rewrites/redirects\nexport const stringifyQuery = (req: BaseNextRequest, query: ParsedUrlQuery) => {\n  const initialQuery = getRequestMeta(req, '__NEXT_INIT_QUERY') || {}\n  const initialQueryValues: Array<string | string[]> =\n    Object.values(initialQuery)\n\n  return stringifyQs(query, undefined, undefined, {\n    encodeURIComponent(value) {\n      if (\n        value in initialQuery ||\n        initialQueryValues.some((initialQueryVal: string | string[]) => {\n          // `value` always refers to a query value, even if it's nested in an array\n          return Array.isArray(initialQueryVal)\n            ? initialQueryVal.includes(value)\n            : initialQueryVal === value\n        })\n      ) {\n        // Encode keys and values from initial query\n        return encodeURIComponent(value)\n      }\n\n      return value\n    },\n  })\n}\n"],"names":["getCustomRouteMatcher","getCustomRoute","type","rule","restrictedRedirectPaths","match","source","internal","regex","undefined","name","fn","_req","_res","_params","_parsedUrl","finished","createHeaderRoute","headerRoute","has","res","params","hasParams","Object","keys","length","header","headers","key","value","setHeader","createRedirectRoute","redirectRoute","statusCode","req","parsedUrl","parsedDestination","appendParamsToQuery","destination","query","search","stringifyQuery","updatedDestination","startsWith","redirect","body","send","initialQuery","initialQueryValues","values","encodeURIComponent","some","initialQueryVal","Array","isArray","includes"],"mappings":";;;;;AAUoD,GAA2B,CAA3B,iBAA2B;AACzD,GAAuC,CAAvC,UAAuC;AAItD,GAAgD,CAAhD,mBAAgD;AACxB,GAAgB,CAAhB,YAAgB;AACN,GAAa,CAAb,YAAa;AAClB,GAAK,CAAL,IAAK;AACA,GAAqB,CAArB,MAAqB;;;;;;AAE9D,KAAK,CAACA,qBAAqB,OAVL,UAAuC,UAUrB,IAAI;AAErC,KAAK,CAACC,cAAc,IAAI,CAAC,CAC9BC,IAAI,GACJC,IAAI,GACJC,uBAAuB,EAKzB,CAAC,GAAK,CAAC;IACL,KAAK,CAACC,KAAK,GAAGL,qBAAqB,CACjCG,IAAI,CAACG,MAAM,GACTH,IAAI,CAASI,QAAQ,IAClBC,KAAa,OAzB8B,iBAA2B,mBA2BnEA,KAAK,EACLN,IAAI,KAAK,CAAU,YAAGE,uBAAuB,GAAGK,SAAS;OAE7DA,SAAS;IAGf,MAAM,CAAC,CAAC;WACHN,IAAI;QACPD,IAAI;QACJG,KAAK;QACLK,IAAI,EAAER,IAAI;QACVS,EAAE,SAASC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,UAAU,IAAM,CAAC;gBAACC,QAAQ,EAAE,KAAK;YAAC,CAAC;IACrE,CAAC;AACH,CAAC;QA3BYf,cAAc,GAAdA,cAAc;AA6BpB,KAAK,CAACgB,iBAAiB,IAAI,CAAC,CACjCd,IAAI,GACJC,uBAAuB,EAIzB,CAAC,GAAK,CAAC;IACL,KAAK,CAACc,WAAW,GAAGjB,cAAc,CAAC,CAAC;QAClCC,IAAI,EAAE,CAAQ;QACdC,IAAI;QACJC,uBAAuB;IACzB,CAAC;IACD,MAAM,CAAC,CAAC;QACNC,KAAK,EAAEa,WAAW,CAACb,KAAK;QACxBc,GAAG,EAAED,WAAW,CAACC,GAAG;QACpBjB,IAAI,EAAEgB,WAAW,CAAChB,IAAI;QACtBQ,IAAI,KAAKQ,WAAW,CAAChB,IAAI,CAAC,CAAC,EAAEgB,WAAW,CAACZ,MAAM,CAAC,aAAa;QAC7DK,EAAE,SAASC,IAAI,EAAEQ,GAAG,EAAEC,MAAM,EAAEN,UAAU,GAAK,CAAC;YAC5C,KAAK,CAACO,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,EAAEI,MAAM,GAAG,CAAC;YAEhD,GAAG,EAAE,KAAK,CAACC,MAAM,IAAKR,WAAW,CAAYS,OAAO,CAAE,CAAC;gBACrD,GAAG,CAAC,CAAC,CAACC,GAAG,GAAEC,KAAK,EAAC,CAAC,GAAGH,MAAM;gBAC3B,EAAE,EAAEJ,SAAS,EAAE,CAAC;oBACdM,GAAG,OA5DN,mBAAgD,iBA4DxBA,GAAG,EAAEP,MAAM;oBAChCQ,KAAK,OA7DR,mBAAgD,iBA6DtBA,KAAK,EAAER,MAAM;gBACtC,CAAC;gBACDD,GAAG,CAACU,SAAS,CAACF,GAAG,EAAEC,KAAK;YAC1B,CAAC;YACD,MAAM,CAAC,CAAC;gBAACb,QAAQ,EAAE,KAAK;YAAC,CAAC;QAC5B,CAAC;IACH,CAAC;AACH,CAAC;QA/BYC,iBAAiB,GAAjBA,iBAAiB;AAiCvB,KAAK,CAACc,mBAAmB,IAAI,CAAC,CACnC5B,IAAI,GACJC,uBAAuB,EAIzB,CAAC,GAAK,CAAC;IACL,KAAK,CAAC4B,aAAa,GAAG/B,cAAc,CAAC,CAAC;QACpCC,IAAI,EAAE,CAAU;QAChBC,IAAI;QACJC,uBAAuB;IACzB,CAAC;IACD,MAAM,CAAC,CAAC;QACNG,QAAQ,EAAEyB,aAAa,CAACzB,QAAQ;QAChCL,IAAI,EAAE8B,aAAa,CAAC9B,IAAI;QACxBG,KAAK,EAAE2B,aAAa,CAAC3B,KAAK;QAC1Bc,GAAG,EAAEa,aAAa,CAACb,GAAG;QACtBc,UAAU,EAAED,aAAa,CAACC,UAAU;QACpCvB,IAAI,GAAG,eAAe,EAAEsB,aAAa,CAAC1B,MAAM;QAC5CK,EAAE,SAASuB,GAAG,EAAEd,GAAG,EAAEC,MAAM,EAAEc,SAAS,GAAK,CAAC;YAC1C,KAAK,CAAC,CAAC,CAACC,iBAAiB,EAAC,CAAC,OA1F1B,mBAAgD,qBA0FA,CAAC;gBAChDC,mBAAmB,EAAE,KAAK;gBAC1BC,WAAW,EAAEN,aAAa,CAACM,WAAW;gBACtCjB,MAAM,EAAEA,MAAM;gBACdkB,KAAK,EAAEJ,SAAS,CAACI,KAAK;YACxB,CAAC;YAED,KAAK,CAAC,CAAC,CAACA,KAAK,EAAC,CAAC,GAAGH,iBAAiB;YACnC,MAAM,CAAEA,iBAAiB,CAASG,KAAK;YAEvCH,iBAAiB,CAACI,MAAM,GAAGC,cAAc,CAACP,GAAG,EAAEK,KAAK;YAEpD,GAAG,CAACG,kBAAkB,OAnGQ,IAAK,SAmGAN,iBAAiB;YAEpD,EAAE,EAAEM,kBAAkB,CAACC,UAAU,CAAC,CAAG,KAAG,CAAC;gBACvCD,kBAAkB,OArGe,MAAqB,2BAqGRA,kBAAkB;YAClE,CAAC;YAEDtB,GAAG,CACAwB,QAAQ,CACPF,kBAAkB,MAnHwB,iBAA2B,oBAoHnDV,aAAa,GAEhCa,IAAI,CAACH,kBAAkB,EACvBI,IAAI;YAEP,MAAM,CAAC,CAAC;gBACN9B,QAAQ,EAAE,IAAI;YAChB,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;QAnDYe,mBAAmB,GAAnBA,mBAAmB;AAwDzB,KAAK,CAACU,cAAc,IAAIP,GAAoB,EAAEK,KAAqB,GAAK,CAAC;IAC9E,KAAK,CAACQ,YAAY,OA9HW,YAAgB,iBA8HTb,GAAG,EAAE,CAAmB,uBAAK,CAAC,CAAC;IACnE,KAAK,CAACc,kBAAkB,GACtBzB,MAAM,CAAC0B,MAAM,CAACF,YAAY;IAE5B,MAAM,KAjIiC,YAAa,YAiIjCR,KAAK,EAAE9B,SAAS,EAAEA,SAAS,EAAE,CAAC;QAC/CyC,kBAAkB,EAACrB,KAAK,EAAE,CAAC;YACzB,EAAE,EACAA,KAAK,IAAIkB,YAAY,IACrBC,kBAAkB,CAACG,IAAI,EAAEC,eAAkC,GAAK,CAAC;gBAC/D,EAA0E,AAA1E,wEAA0E;gBAC1E,MAAM,CAACC,KAAK,CAACC,OAAO,CAACF,eAAe,IAChCA,eAAe,CAACG,QAAQ,CAAC1B,KAAK,IAC9BuB,eAAe,KAAKvB,KAAK;YAC/B,CAAC,GACD,CAAC;gBACD,EAA4C,AAA5C,0CAA4C;gBAC5C,MAAM,CAACqB,kBAAkB,CAACrB,KAAK;YACjC,CAAC;YAED,MAAM,CAACA,KAAK;QACd,CAAC;IACH,CAAC;AACH,CAAC;QAvBYY,cAAc,GAAdA,cAAc"}