{"version":3,"sources":["../../server/router.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\nimport { getNextInternalQuery, NextUrlWithParsedQuery } from './request-meta'\n\nimport pathMatch from '../shared/lib/router/utils/path-match'\nimport { removePathTrailingSlash } from '../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { RouteHas } from '../lib/load-custom-routes'\nimport { matchHas } from '../shared/lib/router/utils/prepare-destination'\nimport { getRequestMeta } from './request-meta'\nimport { BaseNextRequest, BaseNextResponse } from './base-http'\n\nexport const route = pathMatch()\n\nexport type Params = { [param: string]: any }\n\nexport type RouteMatch = (pathname: string | null | undefined) => false | Params\n\ntype RouteResult = {\n  finished: boolean\n  pathname?: string\n  query?: ParsedUrlQuery\n}\n\nexport type Route = {\n  match: RouteMatch\n  has?: RouteHas[]\n  type: string\n  check?: boolean\n  statusCode?: number\n  name: string\n  requireBasePath?: false\n  internal?: true\n  fn: (\n    req: BaseNextRequest,\n    res: BaseNextResponse,\n    params: Params,\n    parsedUrl: NextUrlWithParsedQuery\n  ) => Promise<RouteResult> | RouteResult\n}\n\nexport type DynamicRoutes = Array<{ page: string; match: RouteMatch }>\n\nexport type PageChecker = (pathname: string) => Promise<boolean>\n\nconst customRouteTypes = new Set(['rewrite', 'redirect', 'header'])\n\nexport function hasBasePath(pathname: string, basePath: string): boolean {\n  return (\n    typeof pathname === 'string' &&\n    (pathname === basePath || pathname.startsWith(basePath + '/'))\n  )\n}\n\nexport function replaceBasePath(pathname: string, basePath: string): string {\n  // ensure basePath is only stripped if it matches exactly\n  // and doesn't contain extra chars e.g. basePath /docs\n  // should replace for /docs, /docs/, /docs/a but not /docsss\n  if (hasBasePath(pathname, basePath)) {\n    pathname = pathname.substr(basePath.length)\n    if (!pathname.startsWith('/')) pathname = `/${pathname}`\n  }\n  return pathname\n}\n\nexport default class Router {\n  basePath: string\n  headers: Route[]\n  fsRoutes: Route[]\n  redirects: Route[]\n  rewrites: {\n    beforeFiles: Route[]\n    afterFiles: Route[]\n    fallback: Route[]\n  }\n  catchAllRoute: Route\n  catchAllMiddleware?: Route\n  pageChecker: PageChecker\n  dynamicRoutes: DynamicRoutes\n  useFileSystemPublicRoutes: boolean\n  locales: string[]\n  seenRequests: Set<any>\n\n  constructor({\n    basePath = '',\n    headers = [],\n    fsRoutes = [],\n    rewrites = {\n      beforeFiles: [],\n      afterFiles: [],\n      fallback: [],\n    },\n    redirects = [],\n    catchAllRoute,\n    catchAllMiddleware,\n    dynamicRoutes = [],\n    pageChecker,\n    useFileSystemPublicRoutes,\n    locales = [],\n  }: {\n    basePath: string\n    headers: Route[]\n    fsRoutes: Route[]\n    rewrites: {\n      beforeFiles: Route[]\n      afterFiles: Route[]\n      fallback: Route[]\n    }\n    redirects: Route[]\n    catchAllRoute: Route\n    catchAllMiddleware?: Route\n    dynamicRoutes: DynamicRoutes | undefined\n    pageChecker: PageChecker\n    useFileSystemPublicRoutes: boolean\n    locales: string[]\n  }) {\n    this.basePath = basePath\n    this.headers = headers\n    this.fsRoutes = fsRoutes\n    this.rewrites = rewrites\n    this.redirects = redirects\n    this.pageChecker = pageChecker\n    this.catchAllRoute = catchAllRoute\n    this.catchAllMiddleware = catchAllMiddleware\n    this.dynamicRoutes = dynamicRoutes\n    this.useFileSystemPublicRoutes = useFileSystemPublicRoutes\n    this.locales = locales\n    this.seenRequests = new Set()\n  }\n\n  setDynamicRoutes(routes: DynamicRoutes = []) {\n    this.dynamicRoutes = routes\n  }\n\n  addFsRoute(fsRoute: Route) {\n    this.fsRoutes.unshift(fsRoute)\n  }\n\n  async execute(\n    req: BaseNextRequest,\n    res: BaseNextResponse,\n    parsedUrl: NextUrlWithParsedQuery\n  ): Promise<boolean> {\n    if (this.seenRequests.has(req)) {\n      throw new Error(\n        `Invariant: request has already been processed: ${req.url}, this is an internal error please open an issue.`\n      )\n    }\n    this.seenRequests.add(req)\n\n    // memoize page check calls so we don't duplicate checks for pages\n    const pageChecks: { [name: string]: Promise<boolean> } = {}\n    const memoizedPageChecker = async (p: string): Promise<boolean> => {\n      p = normalizeLocalePath(p, this.locales).pathname\n\n      if (pageChecks[p] !== undefined) {\n        return pageChecks[p]\n      }\n      const result = this.pageChecker(p)\n      pageChecks[p] = result\n      return result\n    }\n\n    let parsedUrlUpdated = parsedUrl\n\n    const applyCheckTrue = async (checkParsedUrl: NextUrlWithParsedQuery) => {\n      const originalFsPathname = checkParsedUrl.pathname\n      const fsPathname = replaceBasePath(originalFsPathname!, this.basePath)\n\n      for (const fsRoute of this.fsRoutes) {\n        const fsParams = fsRoute.match(fsPathname)\n\n        if (fsParams) {\n          checkParsedUrl.pathname = fsPathname\n\n          const fsResult = await fsRoute.fn(req, res, fsParams, checkParsedUrl)\n\n          if (fsResult.finished) {\n            return true\n          }\n\n          checkParsedUrl.pathname = originalFsPathname\n        }\n      }\n      let matchedPage = await memoizedPageChecker(fsPathname)\n\n      // If we didn't match a page check dynamic routes\n      if (!matchedPage) {\n        const normalizedFsPathname = normalizeLocalePath(\n          fsPathname,\n          this.locales\n        ).pathname\n\n        for (const dynamicRoute of this.dynamicRoutes) {\n          if (dynamicRoute.match(normalizedFsPathname)) {\n            matchedPage = true\n          }\n        }\n      }\n\n      // Matched a page or dynamic route so render it using catchAllRoute\n      if (matchedPage) {\n        const pageParams = this.catchAllRoute.match(checkParsedUrl.pathname)\n        checkParsedUrl.pathname = fsPathname\n        checkParsedUrl.query._nextBubbleNoFallback = '1'\n\n        const result = await this.catchAllRoute.fn(\n          req,\n          res,\n          pageParams as Params,\n          checkParsedUrl\n        )\n        return result.finished\n      }\n    }\n\n    /*\n      Desired routes order\n      - headers\n      - redirects\n      - Check filesystem (including pages), if nothing found continue\n      - User rewrites (checking filesystem and pages each match)\n    */\n\n    const allRoutes = [\n      ...this.headers,\n      ...this.redirects,\n      ...this.rewrites.beforeFiles,\n      ...(this.useFileSystemPublicRoutes && this.catchAllMiddleware\n        ? [this.catchAllMiddleware]\n        : []),\n      ...this.fsRoutes,\n      // We only check the catch-all route if public page routes hasn't been\n      // disabled\n      ...(this.useFileSystemPublicRoutes\n        ? [\n            {\n              type: 'route',\n              name: 'page checker',\n              requireBasePath: false,\n              match: route('/:path*'),\n              fn: async (checkerReq, checkerRes, params, parsedCheckerUrl) => {\n                let { pathname } = parsedCheckerUrl\n                pathname = removePathTrailingSlash(pathname || '/')\n\n                if (!pathname) {\n                  return { finished: false }\n                }\n\n                if (await memoizedPageChecker(pathname)) {\n                  return this.catchAllRoute.fn(\n                    checkerReq,\n                    checkerRes,\n                    params,\n                    parsedCheckerUrl\n                  )\n                }\n                return { finished: false }\n              },\n            } as Route,\n          ]\n        : []),\n      ...this.rewrites.afterFiles,\n      ...(this.rewrites.fallback.length\n        ? [\n            {\n              type: 'route',\n              name: 'dynamic route/page check',\n              requireBasePath: false,\n              match: route('/:path*'),\n              fn: async (\n                _checkerReq,\n                _checkerRes,\n                _params,\n                parsedCheckerUrl\n              ) => {\n                return {\n                  finished: await applyCheckTrue(parsedCheckerUrl),\n                }\n              },\n            } as Route,\n            ...this.rewrites.fallback,\n          ]\n        : []),\n\n      // We only check the catch-all route if public page routes hasn't been\n      // disabled\n      ...(this.useFileSystemPublicRoutes ? [this.catchAllRoute] : []),\n    ]\n    const originallyHadBasePath =\n      !this.basePath || getRequestMeta(req, '_nextHadBasePath')\n\n    for (const testRoute of allRoutes) {\n      // if basePath is being used, the basePath will still be included\n      // in the pathname here to allow custom-routes to require containing\n      // it or not, filesystem routes and pages must always include the basePath\n      // if it is set\n      let currentPathname = parsedUrlUpdated.pathname as string\n      const originalPathname = currentPathname\n      const requireBasePath = testRoute.requireBasePath !== false\n      const isCustomRoute = customRouteTypes.has(testRoute.type)\n      const isPublicFolderCatchall = testRoute.name === 'public folder catchall'\n      const isMiddlewareCatchall = testRoute.name === 'middleware catchall'\n      const keepBasePath =\n        isCustomRoute || isPublicFolderCatchall || isMiddlewareCatchall\n      const keepLocale = isCustomRoute\n\n      const currentPathnameNoBasePath = replaceBasePath(\n        currentPathname,\n        this.basePath\n      )\n\n      if (!keepBasePath) {\n        currentPathname = currentPathnameNoBasePath\n      }\n\n      const localePathResult = normalizeLocalePath(\n        currentPathnameNoBasePath,\n        this.locales\n      )\n      const activeBasePath = keepBasePath ? this.basePath : ''\n\n      if (keepLocale) {\n        if (\n          !testRoute.internal &&\n          parsedUrl.query.__nextLocale &&\n          !localePathResult.detectedLocale\n        ) {\n          currentPathname = `${activeBasePath}/${parsedUrl.query.__nextLocale}${\n            currentPathnameNoBasePath === '/' ? '' : currentPathnameNoBasePath\n          }`\n        }\n\n        if (\n          getRequestMeta(req, '__nextHadTrailingSlash') &&\n          !currentPathname.endsWith('/')\n        ) {\n          currentPathname += '/'\n        }\n      } else {\n        currentPathname = `${\n          getRequestMeta(req, '_nextHadBasePath') ? activeBasePath : ''\n        }${\n          activeBasePath && currentPathnameNoBasePath === '/'\n            ? ''\n            : currentPathnameNoBasePath\n        }`\n      }\n\n      let newParams = testRoute.match(currentPathname)\n\n      if (testRoute.has && newParams) {\n        const hasParams = matchHas(req, testRoute.has, parsedUrlUpdated.query)\n\n        if (hasParams) {\n          Object.assign(newParams, hasParams)\n        } else {\n          newParams = false\n        }\n      }\n\n      // Check if the match function matched\n      if (newParams) {\n        // since we require basePath be present for non-custom-routes we\n        // 404 here when we matched an fs route\n        if (!keepBasePath) {\n          if (\n            !originallyHadBasePath &&\n            !getRequestMeta(req, '_nextDidRewrite')\n          ) {\n            if (requireBasePath) {\n              // consider this a non-match so the 404 renders\n              this.seenRequests.delete(req)\n              return false\n            }\n            // page checker occurs before rewrites so we need to continue\n            // to check those since they don't always require basePath\n            continue\n          }\n\n          parsedUrlUpdated.pathname = currentPathname\n        }\n\n        const result = await testRoute.fn(req, res, newParams, parsedUrlUpdated)\n\n        // The response was handled\n        if (result.finished) {\n          this.seenRequests.delete(req)\n          return true\n        }\n\n        // since the fs route didn't finish routing we need to re-add the\n        // basePath to continue checking with the basePath present\n        if (!keepBasePath) {\n          parsedUrlUpdated.pathname = originalPathname\n        }\n\n        if (result.pathname) {\n          parsedUrlUpdated.pathname = result.pathname\n        }\n\n        if (result.query) {\n          parsedUrlUpdated.query = {\n            ...getNextInternalQuery(parsedUrlUpdated.query),\n            ...result.query,\n          }\n        }\n\n        // check filesystem\n        if (testRoute.check === true) {\n          if (await applyCheckTrue(parsedUrlUpdated)) {\n            this.seenRequests.delete(req)\n            return true\n          }\n        }\n      }\n    }\n    this.seenRequests.delete(req)\n    return false\n  }\n}\n"],"names":["hasBasePath","replaceBasePath","route","customRouteTypes","Set","pathname","basePath","startsWith","substr","length","Router","headers","fsRoutes","rewrites","beforeFiles","afterFiles","fallback","redirects","catchAllRoute","catchAllMiddleware","dynamicRoutes","pageChecker","useFileSystemPublicRoutes","locales","seenRequests","setDynamicRoutes","routes","addFsRoute","fsRoute","unshift","execute","req","res","parsedUrl","has","Error","url","add","pageChecks","memoizedPageChecker","p","undefined","result","parsedUrlUpdated","applyCheckTrue","checkParsedUrl","originalFsPathname","fsPathname","fsParams","match","fsResult","fn","finished","matchedPage","normalizedFsPathname","dynamicRoute","pageParams","query","_nextBubbleNoFallback","allRoutes","type","name","requireBasePath","checkerReq","checkerRes","params","parsedCheckerUrl","_checkerReq","_checkerRes","_params","originallyHadBasePath","testRoute","currentPathname","originalPathname","isCustomRoute","isPublicFolderCatchall","isMiddlewareCatchall","keepBasePath","keepLocale","currentPathnameNoBasePath","localePathResult","activeBasePath","internal","__nextLocale","detectedLocale","endsWith","newParams","hasParams","Object","assign","delete","check"],"mappings":"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"}