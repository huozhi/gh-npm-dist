{"version":3,"sources":["../../../../server/lib/squoosh/emscripten-utils.ts"],"sourcesContent":["import { fileURLToPath } from 'url'\n\nexport function pathify(path: string): string {\n  if (path.startsWith('file://')) {\n    path = fileURLToPath(path)\n  }\n  return path\n}\n\nexport function instantiateEmscriptenWasm<T extends EmscriptenWasm.Module>(\n  factory: EmscriptenWasm.ModuleFactory<T>,\n  path: string,\n  workerJS: string = ''\n): Promise<T> {\n  return factory({\n    locateFile(requestPath) {\n      // The glue code generated by emscripten uses the original\n      // file names of the worker file and the wasm binary.\n      // These will have changed in the bundling process and\n      // we need to inject them here.\n      if (requestPath.endsWith('.wasm')) return pathify(path)\n      if (requestPath.endsWith('.worker.js')) return pathify(workerJS)\n      return requestPath\n    },\n  })\n}\n"],"names":["pathify","instantiateEmscriptenWasm","path","startsWith","factory","workerJS","locateFile","requestPath","endsWith"],"mappings":";;;;QAEgBA,OAAO,GAAPA,OAAO;QAOPC,yBAAyB,GAAzBA,yBAAyB;AATX,GAAK,CAAL,IAAK;SAEnBD,OAAO,CAACE,IAAY,EAAU,CAAC;IAC7C,EAAE,EAAEA,IAAI,CAACC,UAAU,CAAC,CAAS,WAAG,CAAC;QAC/BD,IAAI,OAJsB,IAAK,gBAIVA,IAAI;IAC3B,CAAC;IACD,MAAM,CAACA,IAAI;AACb,CAAC;SAEeD,yBAAyB,CACvCG,OAAwC,EACxCF,IAAY,EACZG,QAAgB,GAAG,CAAE,GACT,CAAC;IACb,MAAM,CAACD,OAAO,CAAC,CAAC;QACdE,UAAU,EAACC,WAAW,EAAE,CAAC;YACvB,EAA0D,AAA1D,wDAA0D;YAC1D,EAAqD,AAArD,mDAAqD;YACrD,EAAsD,AAAtD,oDAAsD;YACtD,EAA+B,AAA/B,6BAA+B;YAC/B,EAAE,EAAEA,WAAW,CAACC,QAAQ,CAAC,CAAO,SAAG,MAAM,CAACR,OAAO,CAACE,IAAI;YACtD,EAAE,EAAEK,WAAW,CAACC,QAAQ,CAAC,CAAY,cAAG,MAAM,CAACR,OAAO,CAACK,QAAQ;YAC/D,MAAM,CAACE,WAAW;QACpB,CAAC;IACH,CAAC;AACH,CAAC"}