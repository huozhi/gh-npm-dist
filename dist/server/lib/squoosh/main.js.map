{"version":3,"sources":["../../../../server/lib/squoosh/main.ts"],"sourcesContent":["import { Worker } from 'next/dist/compiled/jest-worker'\nimport * as path from 'path'\nimport { execOnce } from '../../../shared/lib/utils'\nimport { cpus } from 'os'\n\ntype RotateOperation = {\n  type: 'rotate'\n  numRotations: number\n}\ntype ResizeOperation = {\n  type: 'resize'\n} & ({ width: number; height?: never } | { height: number; width?: never })\nexport type Operation = RotateOperation | ResizeOperation\nexport type Encoding = 'jpeg' | 'png' | 'webp' | 'avif'\n\nconst getWorker = execOnce(\n  () =>\n    new Worker(path.resolve(__dirname, 'impl'), {\n      enableWorkerThreads: true,\n      // There will be at most 6 workers needed since each worker will take\n      // at least 1 operation type.\n      numWorkers: Math.max(1, Math.min(cpus().length - 1, 6)),\n      computeWorkerKey: (method) => method,\n    })\n)\n\nexport async function processBuffer(\n  buffer: Buffer,\n  operations: Operation[],\n  encoding: Encoding,\n  quality: number\n): Promise<Buffer> {\n  const worker: typeof import('./impl') = getWorker() as any\n\n  let imageData = await worker.decodeBuffer(buffer)\n  for (const operation of operations) {\n    if (operation.type === 'rotate') {\n      imageData = await worker.rotate(imageData, operation.numRotations)\n    } else if (operation.type === 'resize') {\n      if (\n        operation.width &&\n        imageData.width &&\n        imageData.width > operation.width\n      ) {\n        imageData = await worker.resize({\n          image: imageData,\n          width: operation.width,\n        })\n      } else if (\n        operation.height &&\n        imageData.height &&\n        imageData.height > operation.height\n      ) {\n        imageData = await worker.resize({\n          image: imageData,\n          height: operation.height,\n        })\n      }\n    }\n  }\n\n  switch (encoding) {\n    case 'jpeg':\n      return Buffer.from(await worker.encodeJpeg(imageData, { quality }))\n    case 'webp':\n      return Buffer.from(await worker.encodeWebp(imageData, { quality }))\n    case 'avif':\n      const avifQuality = quality - 20\n      return Buffer.from(\n        await worker.encodeAvif(imageData, {\n          quality: Math.max(avifQuality, 0),\n        })\n      )\n    case 'png':\n      return Buffer.from(await worker.encodePng(imageData))\n    default:\n      throw Error(`Unsupported encoding format`)\n  }\n}\n\nexport async function decodeBuffer(buffer: Buffer) {\n  const worker: typeof import('./impl') = getWorker() as any\n  const imageData = await worker.decodeBuffer(buffer)\n  return imageData\n}\n"],"names":["processBuffer","decodeBuffer","path","getWorker","resolve","__dirname","enableWorkerThreads","numWorkers","Math","max","min","length","computeWorkerKey","method","buffer","operations","encoding","quality","worker","imageData","operation","type","rotate","numRotations","width","resize","image","height","Buffer","from","encodeJpeg","encodeWebp","avifQuality","encodeAvif","encodePng","Error"],"mappings":"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"}