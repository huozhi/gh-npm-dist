{"version":3,"sources":["../../../server/lib/recursive-readdir-sync.ts"],"sourcesContent":["import fs from 'fs'\nimport { join } from 'path'\n\n/**\n * Recursively read directory\n * @param  {string[]=[]} arr This doesn't have to be provided, it's used for the recursion\n * @param  {string=dir`} rootDir Used to replace the initial path, only the relative path is left, it's faster than path.relative.\n * @returns Array holding all relative paths\n */\nexport function recursiveReadDirSync(\n  dir: string,\n  arr: string[] = [],\n  rootDir = dir\n): string[] {\n  const result = fs.readdirSync(dir)\n\n  result.forEach((part: string) => {\n    const absolutePath = join(dir, part)\n    const pathStat = fs.statSync(absolutePath)\n\n    if (pathStat.isDirectory()) {\n      recursiveReadDirSync(absolutePath, arr, rootDir)\n      return\n    }\n    arr.push(absolutePath.replace(rootDir, ''))\n  })\n\n  return arr\n}\n"],"names":["recursiveReadDirSync","dir","arr","rootDir","result","readdirSync","forEach","part","absolutePath","pathStat","statSync","isDirectory","push","replace"],"mappings":";;;;QASgBA,oBAAoB,GAApBA,oBAAoB;AATrB,GAAI,CAAJ,GAAI;AACE,GAAM,CAAN,KAAM;;;;;;SAQXA,oBAAoB,CAClCC,GAAW,EACXC,GAAa,GAAG,CAAC,CAAC,EAClBC,OAAO,GAAGF,GAAG,EACH,CAAC;IACX,KAAK,CAACG,MAAM,GAdC,GAAI,SAcCC,WAAW,CAACJ,GAAG;IAEjCG,MAAM,CAACE,OAAO,EAAEC,IAAY,GAAK,CAAC;QAChC,KAAK,CAACC,YAAY,OAhBD,KAAM,OAgBGP,GAAG,EAAEM,IAAI;QACnC,KAAK,CAACE,QAAQ,GAlBH,GAAI,SAkBKC,QAAQ,CAACF,YAAY;QAEzC,EAAE,EAAEC,QAAQ,CAACE,WAAW,IAAI,CAAC;YAC3BX,oBAAoB,CAACQ,YAAY,EAAEN,GAAG,EAAEC,OAAO;YAC/C,MAAM;QACR,CAAC;QACDD,GAAG,CAACU,IAAI,CAACJ,YAAY,CAACK,OAAO,CAACV,OAAO,EAAE,CAAE;IAC3C,CAAC;IAED,MAAM,CAACD,GAAG;AACZ,CAAC"}