{"version":3,"sources":["../../server/request-meta.ts"],"sourcesContent":["/* eslint-disable no-redeclare */\nimport type { IncomingMessage } from 'http'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { UrlWithParsedQuery } from 'url'\n\nimport { BaseNextRequest } from './base-http'\n\nexport const NEXT_REQUEST_META = Symbol('NextRequestMeta')\n\nexport type NextIncomingMessage = (BaseNextRequest | IncomingMessage) & {\n  [NEXT_REQUEST_META]?: RequestMeta\n}\n\nexport interface RequestMeta {\n  __NEXT_INIT_QUERY?: ParsedUrlQuery\n  __NEXT_INIT_URL?: string\n  __nextHadTrailingSlash?: boolean\n  __nextIsLocaleDomain?: boolean\n  __nextStrippedLocale?: boolean\n  _nextDidRewrite?: boolean\n  _nextHadBasePath?: boolean\n  _nextRewroteUrl?: string\n}\n\nexport function getRequestMeta(\n  req: NextIncomingMessage,\n  key?: undefined\n): RequestMeta\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key: K\n): RequestMeta[K]\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key?: K\n): RequestMeta | RequestMeta[K] {\n  const meta = req[NEXT_REQUEST_META] || {}\n  return typeof key === 'string' ? meta[key] : meta\n}\n\nexport function setRequestMeta(req: NextIncomingMessage, meta: RequestMeta) {\n  req[NEXT_REQUEST_META] = meta\n  return getRequestMeta(req)\n}\n\nexport function addRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K,\n  value: RequestMeta[K]\n) {\n  const meta = getRequestMeta(request)\n  meta[key] = value\n  return setRequestMeta(request, meta)\n}\n\ntype NextQueryMetadata = {\n  __nextDefaultLocale?: string\n  __nextFallback?: 'true'\n  __nextLocale?: string\n  __nextSsgPath?: string\n  _nextBubbleNoFallback?: '1'\n  _nextDataReq?: '1'\n}\n\nexport type NextParsedUrlQuery = ParsedUrlQuery &\n  NextQueryMetadata & {\n    amp?: '1'\n  }\n\nexport interface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n  query: NextParsedUrlQuery\n}\n\nexport function getNextInternalQuery(\n  query: NextParsedUrlQuery\n): NextQueryMetadata {\n  const keysToInclude: (keyof NextQueryMetadata)[] = [\n    '__nextDefaultLocale',\n    '__nextFallback',\n    '__nextLocale',\n    '__nextSsgPath',\n    '_nextBubbleNoFallback',\n    '_nextDataReq',\n  ]\n  const nextInternalQuery: NextQueryMetadata = {}\n\n  for (const key of keysToInclude) {\n    if (key in query) {\n      // @ts-ignore this can't be typed correctly\n      nextInternalQuery[key] = query[key]\n    }\n  }\n\n  return nextInternalQuery\n}\n"],"names":["getRequestMeta","setRequestMeta","addRequestMeta","getNextInternalQuery","NEXT_REQUEST_META","Symbol","req","key","meta","request","value","query","keysToInclude","nextInternalQuery"],"mappings":";;;;QAgCgBA,cAAc,GAAdA,cAAc;QAQdC,cAAc,GAAdA,cAAc;QAKdC,cAAc,GAAdA,cAAc;QA4BdC,oBAAoB,GAApBA,oBAAoB;;AAlE7B,KAAK,CAACC,iBAAiB,GAAGC,MAAM,CAAC,CAAiB;QAA5CD,iBAAiB,GAAjBA,iBAAiB;SAyBdJ,cAAc,CAC5BM,GAAwB,EACxBC,GAAO,EACuB,CAAC;IAC/B,KAAK,CAACC,IAAI,GAAGF,GAAG,CAACF,iBAAiB,KAAK,CAAC,CAAC;IACzC,MAAM,CAAC,MAAM,CAACG,GAAG,KAAK,CAAQ,UAAGC,IAAI,CAACD,GAAG,IAAIC,IAAI;AACnD,CAAC;SAEeP,cAAc,CAACK,GAAwB,EAAEE,IAAiB,EAAE,CAAC;IAC3EF,GAAG,CAACF,iBAAiB,IAAII,IAAI;IAC7B,MAAM,CAACR,cAAc,CAACM,GAAG;AAC3B,CAAC;SAEeJ,cAAc,CAC5BO,OAA4B,EAC5BF,GAAM,EACNG,KAAqB,EACrB,CAAC;IACD,KAAK,CAACF,IAAI,GAAGR,cAAc,CAACS,OAAO;IACnCD,IAAI,CAACD,GAAG,IAAIG,KAAK;IACjB,MAAM,CAACT,cAAc,CAACQ,OAAO,EAAED,IAAI;AACrC,CAAC;SAoBeL,oBAAoB,CAClCQ,KAAyB,EACN,CAAC;IACpB,KAAK,CAACC,aAAa,GAAgC,CAAC;QAClD,CAAqB;QACrB,CAAgB;QAChB,CAAc;QACd,CAAe;QACf,CAAuB;QACvB,CAAc;IAChB,CAAC;IACD,KAAK,CAACC,iBAAiB,GAAsB,CAAC,CAAC;IAE/C,GAAG,EAAE,KAAK,CAACN,GAAG,IAAIK,aAAa,CAAE,CAAC;QAChC,EAAE,EAAEL,GAAG,IAAII,KAAK,EAAE,CAAC;YACjB,EAA2C,AAA3C,yCAA2C;YAC3CE,iBAAiB,CAACN,GAAG,IAAII,KAAK,CAACJ,GAAG;QACpC,CAAC;IACH,CAAC;IAED,MAAM,CAACM,iBAAiB;AAC1B,CAAC"}