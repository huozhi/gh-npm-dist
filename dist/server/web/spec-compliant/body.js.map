{"version":3,"sources":["../../../../server/web/spec-compliant/body.ts"],"sourcesContent":["import { formDataIterator, getBoundary } from '../form-data'\nimport { streamToIterator } from '../utils'\nimport * as util from '../is'\n\nconst INTERNALS = Symbol('internal body')\n\nabstract class BaseBody implements Body {\n  abstract headers: Headers\n\n  [INTERNALS]: {\n    bodyInit?: BodyInit\n    boundary?: string\n    disturbed: boolean\n    stream?: ReadableStream<Uint8Array> | null\n  }\n\n  constructor(bodyInit?: BodyInit) {\n    this[INTERNALS] = {\n      bodyInit: bodyInit,\n      disturbed: false,\n    }\n\n    if (util.isFormData(bodyInit)) {\n      this[INTERNALS].boundary = getBoundary()\n    }\n  }\n\n  get body(): ReadableStream<Uint8Array> | null {\n    const body = this[INTERNALS].bodyInit\n    if (!body) {\n      return null\n    }\n\n    const that = this\n    if (!this[INTERNALS].stream) {\n      const readable = new ReadableStream({\n        async start(controller) {\n          if (typeof body === 'string') {\n            const encoder = new TextEncoder()\n            controller.enqueue(encoder.encode(body))\n          } else if (util.isBlob(body)) {\n            const buffer = await body.arrayBuffer()\n            controller.enqueue(new Uint8Array(buffer))\n          } else if (util.isDataView(body)) {\n            controller.enqueue(body)\n          } else if (util.isArrayBuffer(body)) {\n            controller.enqueue(body)\n          } else if (util.isArrayBufferView(body)) {\n            controller.enqueue(body)\n          } else if (util.isURLSearchParams(body)) {\n            const encoder = new TextEncoder()\n            controller.enqueue(encoder.encode(body.toString()))\n          } else if (util.isFormData(body)) {\n            for await (const chunk of formDataIterator(\n              body,\n              that[INTERNALS].boundary!\n            )) {\n              controller.enqueue(chunk)\n            }\n          } else if (util.isReadableStream(body)) {\n            for await (const chunk of streamToIterator(body)) {\n              if (chunk.length) {\n                controller.enqueue(chunk)\n              }\n            }\n          } else {\n            const text = Object.prototype.toString.call(body)\n            const encoder = new TextEncoder()\n            controller.enqueue(encoder.encode(text))\n          }\n\n          controller.close()\n        },\n      })\n\n      // Spy on reading chunks to set the stream as disturbed\n      const getReader = readable.getReader.bind(readable)\n      readable.getReader = () => {\n        const reader = getReader()\n        const read = reader.read.bind(reader)\n        reader.read = () => {\n          this[INTERNALS].disturbed = true\n          return read()\n        }\n        return reader\n      }\n\n      this[INTERNALS].stream = readable\n    }\n\n    return this[INTERNALS].stream!\n  }\n\n  get bodyUsed(): boolean {\n    return this[INTERNALS].disturbed\n  }\n\n  _consume() {\n    if (this[INTERNALS].disturbed) {\n      return Promise.reject(\n        new TypeError(\n          `Body has already been used. It can only be used once. Use tee() first if you need to read it twice.`\n        )\n      )\n    }\n\n    this[INTERNALS].disturbed = true\n    const body = this.body\n    return new Promise<Uint8Array>((resolve, reject) => {\n      let buffer = new Uint8Array(0)\n      if (!body) {\n        return resolve(buffer)\n      }\n\n      const reader = body.getReader()\n      ;(function pump() {\n        reader.read().then(({ value, done }) => {\n          if (done) {\n            return resolve(buffer)\n          } else if (value) {\n            const merge = new Uint8Array(buffer.length + value.length)\n            merge.set(buffer)\n            merge.set(value, buffer.length)\n            buffer = merge\n          }\n\n          pump()\n        }, reject)\n      })()\n    })\n  }\n\n  async arrayBuffer() {\n    const buffer = await this._consume()\n    const arrayBuffer = new ArrayBuffer(buffer.length)\n    const view = new Uint8Array(arrayBuffer)\n\n    for (let i = 0; i < buffer.length; ++i) {\n      view[i] = buffer[i]\n    }\n\n    return arrayBuffer\n  }\n\n  async blob() {\n    const buffer = await this._consume()\n    return new Blob([buffer])\n  }\n\n  async formData() {\n    const bodyInit = this[INTERNALS].bodyInit\n    if (util.isURLSearchParams(bodyInit)) {\n      const form = new FormData()\n      for (const [key, value] of bodyInit) {\n        form.append(key, value)\n      }\n      return form\n    } else if (util.isFormData(bodyInit)) {\n      return bodyInit\n    } else {\n      throw new TypeError(\n        `Unrecognized Content-Type header value. FormData can only parse the following MIME types: multipart/form-data, application/x-www-form-urlencoded.`\n      )\n    }\n  }\n\n  async text() {\n    const decoder = new TextDecoder()\n    const buffer = await this._consume()\n    return decoder.decode(buffer)\n  }\n\n  async json() {\n    const text = await this.text()\n\n    try {\n      return JSON.parse(text)\n    } catch (err: any) {\n      throw new TypeError(`invalid json body reason: ${err.message}`)\n    }\n  }\n}\n\nexport { BaseBody as Body }\n\nexport type BodyInit =\n  | null\n  | string\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | ReadableStream<Uint8Array>\n\nexport function extractContentType(instance: BaseBody) {\n  const body = instance[INTERNALS].bodyInit\n  if (typeof body === 'string') {\n    return 'text/plain;charset=UTF-8'\n  } else if (util.isBlob(body)) {\n    return body.type\n  } else if (util.isDataView(body)) {\n    return null\n  } else if (util.isArrayBuffer(body)) {\n    return null\n  } else if (util.isArrayBufferView(body)) {\n    return null\n  } else if (util.isURLSearchParams(body)) {\n    return 'application/x-www-form-urlencoded;charset=UTF-8'\n  } else if (util.isFormData(body)) {\n    return `multipart/form-data;boundary=${instance[INTERNALS].boundary}`\n  } else if (util.isReadableStream(body)) {\n    return null\n  } else {\n    return 'text/plain;charset=UTF-8'\n  }\n}\n\nexport function cloneBody(instance: BaseBody) {\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used')\n  }\n\n  const body = instance[INTERNALS].bodyInit\n  if (util.isReadableStream(body)) {\n    const [r1, r2] = body.tee()\n    instance[INTERNALS].bodyInit = r1\n    return r2\n  }\n\n  return body || null\n}\n\nexport function getInstanceBody(instance: BaseBody) {\n  return instance[INTERNALS].bodyInit\n}\n"],"names":["extractContentType","cloneBody","getInstanceBody","util","INTERNALS","Symbol","BaseBody","bodyInit","disturbed","isFormData","boundary","body","that","stream","readable","ReadableStream","start","controller","encoder","TextEncoder","enqueue","encode","isBlob","buffer","arrayBuffer","Uint8Array","isDataView","isArrayBuffer","isArrayBufferView","isURLSearchParams","toString","chunk","isReadableStream","length","text","Object","prototype","call","close","getReader","bind","reader","read","bodyUsed","_consume","Promise","reject","TypeError","resolve","pump","then","value","done","merge","set","ArrayBuffer","view","i","blob","Blob","formData","form","FormData","key","append","decoder","TextDecoder","decode","json","JSON","parse","err","message","Body","instance","type","Error","r1","r2","tee"],"mappings":"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"}