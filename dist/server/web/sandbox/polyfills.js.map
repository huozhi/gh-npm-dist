{"version":3,"sources":["../../../../server/web/sandbox/polyfills.ts"],"sourcesContent":["import { Crypto as WebCrypto } from 'next/dist/compiled/@peculiar/webcrypto'\nimport { CryptoKey } from 'next/dist/compiled/@peculiar/webcrypto'\nimport { v4 as uuid } from 'next/dist/compiled/uuid'\nimport { ReadableStream } from './readable-stream'\n\nimport crypto from 'crypto'\n\nexport function atob(b64Encoded: string) {\n  return Buffer.from(b64Encoded, 'base64').toString('binary')\n}\n\nexport function btoa(str: string) {\n  return Buffer.from(str, 'binary').toString('base64')\n}\n\nexport { CryptoKey, ReadableStream }\n\nexport class Crypto extends WebCrypto {\n  // @ts-ignore Remove once types are updated and we deprecate node 12\n  randomUUID = crypto.randomUUID || uuid\n}\n"],"names":["atob","btoa","CryptoKey","ReadableStream","b64Encoded","Buffer","from","toString","str","Crypto","randomUUID"],"mappings":";;;;QAOgBA,IAAI,GAAJA,IAAI;QAIJC,IAAI,GAAJA,IAAI;+BAIXC,CAAS;;;eAfkB,UAAwC;;;+BAexDC,CAAc;;;eAZH,eAAmB;;;AAHd,GAAwC,CAAxC,UAAwC;AAEjD,GAAyB,CAAzB,KAAyB;AACrB,GAAmB,CAAnB,eAAmB;AAE/B,GAAQ,CAAR,OAAQ;;;;;;SAEXH,IAAI,CAACI,UAAkB,EAAE,CAAC;IACxC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACF,UAAU,EAAE,CAAQ,SAAEG,QAAQ,CAAC,CAAQ;AAC5D,CAAC;SAEeN,IAAI,CAACO,GAAW,EAAE,CAAC;IACjC,MAAM,CAACH,MAAM,CAACC,IAAI,CAACE,GAAG,EAAE,CAAQ,SAAED,QAAQ,CAAC,CAAQ;AACrD,CAAC;MAIYE,MAAM,SAjBiB,UAAwC;;;QAkB1E,EAAoE,AAApE,kEAAoE;QAD/D,IAGN,CADCC,UAAU,GAdO,OAAQ,SAcLA,UAAU,IAjBL,KAAyB;;;QAevCD,MAAM,GAANA,MAAM"}