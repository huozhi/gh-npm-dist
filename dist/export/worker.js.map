{"version":3,"sources":["../../export/worker.ts"],"sourcesContent":["import type { ComponentType } from 'react'\nimport type { FontManifest } from '../server/font-utils'\nimport type { GetStaticProps } from '../types'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextConfigComplete } from '../server/config-shared'\nimport type { NextParsedUrlQuery } from '../server/request-meta'\nimport url from 'url'\nimport { extname, join, dirname, sep } from 'path'\nimport { renderToHTML } from '../server/render'\nimport { promises } from 'fs'\nimport AmpHtmlValidator from 'next/dist/compiled/amphtml-validator'\nimport { loadComponents } from '../server/load-components'\nimport { isDynamicRoute } from '../shared/lib/router/utils/is-dynamic'\nimport { getRouteMatcher } from '../shared/lib/router/utils/route-matcher'\nimport { getRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { normalizePagePath } from '../server/normalize-page-path'\nimport { SERVER_PROPS_EXPORT_ERROR } from '../lib/constants'\nimport '../server/node-polyfill-fetch'\nimport { requireFontManifest } from '../server/require'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { trace } from '../trace'\nimport { isInAmpMode } from '../shared/lib/amp'\nimport { setHttpAgentOptions } from '../server/config'\nimport RenderResult from '../server/render-result'\nimport isError from '../lib/is-error'\n\nconst envConfig = require('../shared/lib/runtime-config')\n\n;(global as any).__NEXT_DATA__ = {\n  nextExport: true,\n}\n\ninterface AmpValidation {\n  page: string\n  result: {\n    errors: AmpHtmlValidator.ValidationError[]\n    warnings: AmpHtmlValidator.ValidationError[]\n  }\n}\n\ninterface PathMap {\n  page: string\n  query?: NextParsedUrlQuery\n}\n\ninterface ExportPageInput {\n  path: string\n  pathMap: PathMap\n  distDir: string\n  outDir: string\n  pagesDataDir: string\n  renderOpts: RenderOpts\n  buildExport?: boolean\n  serverRuntimeConfig: { [key: string]: any }\n  subFolders?: boolean\n  serverless: boolean\n  optimizeFonts: boolean\n  optimizeImages?: boolean\n  optimizeCss: any\n  disableOptimizedLoading: any\n  parentSpanId: any\n  httpAgentOptions: NextConfigComplete['httpAgentOptions']\n}\n\ninterface ExportPageResults {\n  ampValidations: AmpValidation[]\n  fromBuildExportRevalidate?: number\n  error?: boolean\n  ssgNotFound?: boolean\n  duration: number\n}\n\ninterface RenderOpts {\n  runtimeConfig?: { [key: string]: any }\n  params?: { [key: string]: string | string[] }\n  ampPath?: string\n  ampValidatorPath?: string\n  ampSkipValidation?: boolean\n  optimizeFonts?: boolean\n  optimizeImages?: boolean\n  disableOptimizedLoading?: boolean\n  optimizeCss?: any\n  fontManifest?: FontManifest\n  locales?: string[]\n  locale?: string\n  defaultLocale?: string\n  trailingSlash?: boolean\n}\n\ntype ComponentModule = ComponentType<{}> & {\n  renderReqToHTML: typeof renderToHTML\n  getStaticProps?: GetStaticProps\n}\n\nexport default async function exportPage({\n  parentSpanId,\n  path,\n  pathMap,\n  distDir,\n  outDir,\n  pagesDataDir,\n  renderOpts,\n  buildExport,\n  serverRuntimeConfig,\n  subFolders,\n  serverless,\n  optimizeFonts,\n  optimizeImages,\n  optimizeCss,\n  disableOptimizedLoading,\n  httpAgentOptions,\n}: ExportPageInput): Promise<ExportPageResults> {\n  setHttpAgentOptions(httpAgentOptions)\n  const exportPageSpan = trace('export-page-worker', parentSpanId)\n\n  return exportPageSpan.traceAsyncFn(async () => {\n    const start = Date.now()\n    let results: Omit<ExportPageResults, 'duration'> = {\n      ampValidations: [],\n    }\n\n    try {\n      const { query: originalQuery = {} } = pathMap\n      const { page } = pathMap\n      const filePath = normalizePagePath(path)\n      const isDynamic = isDynamicRoute(page)\n      const ampPath = `${filePath}.amp`\n      let renderAmpPath = ampPath\n      let query = { ...originalQuery }\n      let params: { [key: string]: string | string[] } | undefined\n\n      let updatedPath = query.__nextSsgPath || path\n      let locale = query.__nextLocale || renderOpts.locale\n      delete query.__nextLocale\n      delete query.__nextSsgPath\n\n      if (renderOpts.locale) {\n        const localePathResult = normalizeLocalePath(path, renderOpts.locales)\n\n        if (localePathResult.detectedLocale) {\n          updatedPath = localePathResult.pathname\n          locale = localePathResult.detectedLocale\n\n          if (locale === renderOpts.defaultLocale) {\n            renderAmpPath = `${normalizePagePath(updatedPath)}.amp`\n          }\n        }\n      }\n\n      // We need to show a warning if they try to provide query values\n      // for an auto-exported page since they won't be available\n      const hasOrigQueryValues = Object.keys(originalQuery).length > 0\n      const queryWithAutoExportWarn = () => {\n        if (hasOrigQueryValues) {\n          throw new Error(\n            `\\nError: you provided query values for ${path} which is an auto-exported page. These can not be applied since the page can no longer be re-rendered on the server. To disable auto-export for this page add \\`getInitialProps\\`\\n`\n          )\n        }\n      }\n\n      // Check if the page is a specified dynamic route\n      const nonLocalizedPath = normalizeLocalePath(\n        path,\n        renderOpts.locales\n      ).pathname\n\n      if (isDynamic && page !== nonLocalizedPath) {\n        params = getRouteMatcher(getRouteRegex(page))(updatedPath) || undefined\n        if (params) {\n          // we have to pass these separately for serverless\n          if (!serverless) {\n            query = {\n              ...query,\n              ...params,\n            }\n          }\n        } else {\n          throw new Error(\n            `The provided export path '${updatedPath}' doesn't match the '${page}' page.\\nRead more: https://nextjs.org/docs/messages/export-path-mismatch`\n          )\n        }\n      }\n\n      const headerMocks = {\n        headers: {},\n        getHeader: () => ({}),\n        setHeader: () => {},\n        hasHeader: () => false,\n        removeHeader: () => {},\n        getHeaderNames: () => [],\n      }\n\n      const req = {\n        url: updatedPath,\n        ...headerMocks,\n      } as unknown as IncomingMessage\n      const res = {\n        ...headerMocks,\n      } as unknown as ServerResponse\n\n      if (updatedPath === '/500' && page === '/_error') {\n        res.statusCode = 500\n      }\n\n      if (renderOpts.trailingSlash && !req.url?.endsWith('/')) {\n        req.url += '/'\n      }\n\n      envConfig.setConfig({\n        serverRuntimeConfig,\n        publicRuntimeConfig: renderOpts.runtimeConfig,\n      })\n\n      const getHtmlFilename = (_path: string) =>\n        subFolders ? `${_path}${sep}index.html` : `${_path}.html`\n      let htmlFilename = getHtmlFilename(filePath)\n\n      // dynamic routes can provide invalid extensions e.g. /blog/[...slug] returns an\n      // extension of `.slug]`\n      const pageExt = isDynamic ? '' : extname(page)\n      const pathExt = isDynamic ? '' : extname(path)\n      // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\n      if (pageExt !== pathExt && pathExt !== '') {\n        const isBuiltinPaths = ['/500', '/404'].some(\n          (p) => p === path || p === path + '.html'\n        )\n        // If the ssg path has .html extension, and it's not builtin paths, use it directly\n        // Otherwise, use that as the filename instead\n        const isHtmlExtPath =\n          !serverless && !isBuiltinPaths && path.endsWith('.html')\n        htmlFilename = isHtmlExtPath ? getHtmlFilename(path) : path\n      } else if (path === '/') {\n        // If the path is the root, just use index.html\n        htmlFilename = 'index.html'\n      }\n\n      const baseDir = join(outDir, dirname(htmlFilename))\n      let htmlFilepath = join(outDir, htmlFilename)\n\n      await promises.mkdir(baseDir, { recursive: true })\n      let renderResult\n      let curRenderOpts: RenderOpts = {}\n      let renderMethod = renderToHTML\n      let inAmpMode = false,\n        hybridAmp = false\n\n      const renderedDuringBuild = (getStaticProps: any) => {\n        return !buildExport && getStaticProps && !isDynamicRoute(path)\n      }\n\n      if (serverless) {\n        const curUrl = url.parse(req.url!, true)\n        req.url = url.format({\n          ...curUrl,\n          query: {\n            ...curUrl.query,\n            ...query,\n          },\n        })\n        const {\n          Component,\n          ComponentMod,\n          getServerSideProps,\n          getStaticProps,\n          pageConfig,\n        } = await loadComponents(distDir, page, serverless)\n        const ampState = {\n          ampFirst: pageConfig?.amp === true,\n          hasQuery: Boolean(query.amp),\n          hybrid: pageConfig?.amp === 'hybrid',\n        }\n        inAmpMode = isInAmpMode(ampState)\n        hybridAmp = ampState.hybrid\n\n        if (getServerSideProps) {\n          throw new Error(\n            `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\n          )\n        }\n\n        // if it was auto-exported the HTML is loaded here\n        if (typeof Component === 'string') {\n          renderResult = RenderResult.fromStatic(Component)\n          queryWithAutoExportWarn()\n        } else {\n          // for non-dynamic SSG pages we should have already\n          // prerendered the file\n          if (renderedDuringBuild(getStaticProps))\n            return { ...results, duration: Date.now() - start }\n\n          if (getStaticProps && !htmlFilepath.endsWith('.html')) {\n            // make sure it ends with .html if the name contains a dot\n            htmlFilename += '.html'\n            htmlFilepath += '.html'\n          }\n\n          renderMethod = (ComponentMod as ComponentModule).renderReqToHTML\n          const result = await renderMethod(\n            req,\n            res,\n            'export',\n            {\n              ampPath: renderAmpPath,\n              /// @ts-ignore\n              optimizeFonts,\n              /// @ts-ignore\n              optimizeImages,\n              /// @ts-ignore\n              optimizeCss,\n              disableOptimizedLoading,\n              distDir,\n              fontManifest: optimizeFonts\n                ? requireFontManifest(distDir, serverless)\n                : null,\n              locale: locale!,\n              locales: renderOpts.locales!,\n            },\n            // @ts-ignore\n            params\n          )\n          curRenderOpts = (result as any).renderOpts || {}\n          renderResult = (result as any).html\n        }\n\n        if (!renderResult && !(curRenderOpts as any).isNotFound) {\n          throw new Error(`Failed to render serverless page`)\n        }\n      } else {\n        const components = await loadComponents(distDir, page, serverless)\n        const ampState = {\n          ampFirst: components.pageConfig?.amp === true,\n          hasQuery: Boolean(query.amp),\n          hybrid: components.pageConfig?.amp === 'hybrid',\n        }\n        inAmpMode = isInAmpMode(ampState)\n        hybridAmp = ampState.hybrid\n\n        if (components.getServerSideProps) {\n          throw new Error(\n            `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\n          )\n        }\n\n        // for non-dynamic SSG pages we should have already\n        // prerendered the file\n        if (renderedDuringBuild(components.getStaticProps)) {\n          return { ...results, duration: Date.now() - start }\n        }\n\n        // TODO: de-dupe the logic here between serverless and server mode\n        if (components.getStaticProps && !htmlFilepath.endsWith('.html')) {\n          // make sure it ends with .html if the name contains a dot\n          htmlFilepath += '.html'\n          htmlFilename += '.html'\n        }\n\n        if (typeof components.Component === 'string') {\n          renderResult = RenderResult.fromStatic(components.Component)\n          queryWithAutoExportWarn()\n        } else {\n          /**\n           * This sets environment variable to be used at the time of static export by head.tsx.\n           * Using this from process.env allows targeting both serverless and SSR by calling\n           * `process.env.__NEXT_OPTIMIZE_FONTS`.\n           * TODO(prateekbh@): Remove this when experimental.optimizeFonts are being cleaned up.\n           */\n          if (optimizeFonts) {\n            process.env.__NEXT_OPTIMIZE_FONTS = JSON.stringify(true)\n          }\n          if (optimizeImages) {\n            process.env.__NEXT_OPTIMIZE_IMAGES = JSON.stringify(true)\n          }\n          if (optimizeCss) {\n            process.env.__NEXT_OPTIMIZE_CSS = JSON.stringify(true)\n          }\n          curRenderOpts = {\n            ...components,\n            ...renderOpts,\n            ampPath: renderAmpPath,\n            params,\n            optimizeFonts,\n            optimizeImages,\n            optimizeCss,\n            disableOptimizedLoading,\n            fontManifest: optimizeFonts\n              ? requireFontManifest(distDir, serverless)\n              : null,\n            locale: locale as string,\n          }\n          renderResult = await renderMethod(\n            req,\n            res,\n            page,\n            query,\n            // @ts-ignore\n            curRenderOpts\n          )\n        }\n      }\n      results.ssgNotFound = (curRenderOpts as any).isNotFound\n\n      const validateAmp = async (\n        rawAmpHtml: string,\n        ampPageName: string,\n        validatorPath?: string\n      ) => {\n        const validator = await AmpHtmlValidator.getInstance(validatorPath)\n        const result = validator.validateString(rawAmpHtml)\n        const errors = result.errors.filter((e) => e.severity === 'ERROR')\n        const warnings = result.errors.filter((e) => e.severity !== 'ERROR')\n\n        if (warnings.length || errors.length) {\n          results.ampValidations.push({\n            page: ampPageName,\n            result: {\n              errors,\n              warnings,\n            },\n          })\n        }\n      }\n\n      const html = renderResult ? renderResult.toUnchunkedString() : ''\n      if (inAmpMode && !curRenderOpts.ampSkipValidation) {\n        if (!results.ssgNotFound) {\n          await validateAmp(html, path, curRenderOpts.ampValidatorPath)\n        }\n      } else if (hybridAmp) {\n        // we need to render the AMP version\n        let ampHtmlFilename = `${ampPath}${sep}index.html`\n        if (!subFolders) {\n          ampHtmlFilename = `${ampPath}.html`\n        }\n        const ampBaseDir = join(outDir, dirname(ampHtmlFilename))\n        const ampHtmlFilepath = join(outDir, ampHtmlFilename)\n\n        try {\n          await promises.access(ampHtmlFilepath)\n        } catch (_) {\n          // make sure it doesn't exist from manual mapping\n          let ampRenderResult\n          if (serverless) {\n            req.url += (req.url!.includes('?') ? '&' : '?') + 'amp=1'\n            // @ts-ignore\n            ampRenderResult = (\n              await (renderMethod as any)(\n                req,\n                res,\n                'export',\n                curRenderOpts,\n                params\n              )\n            ).html\n          } else {\n            ampRenderResult = await renderMethod(\n              req,\n              res,\n              page,\n              // @ts-ignore\n              { ...query, amp: '1' },\n              curRenderOpts as any\n            )\n          }\n\n          const ampHtml = ampRenderResult\n            ? ampRenderResult.toUnchunkedString()\n            : ''\n          if (!curRenderOpts.ampSkipValidation) {\n            await validateAmp(ampHtml, page + '?amp=1')\n          }\n          await promises.mkdir(ampBaseDir, { recursive: true })\n          await promises.writeFile(ampHtmlFilepath, ampHtml, 'utf8')\n        }\n      }\n\n      if ((curRenderOpts as any).pageData) {\n        const dataFile = join(\n          pagesDataDir,\n          htmlFilename.replace(/\\.html$/, '.json')\n        )\n\n        await promises.mkdir(dirname(dataFile), { recursive: true })\n        await promises.writeFile(\n          dataFile,\n          JSON.stringify((curRenderOpts as any).pageData),\n          'utf8'\n        )\n\n        if (hybridAmp) {\n          await promises.writeFile(\n            dataFile.replace(/\\.json$/, '.amp.json'),\n            JSON.stringify((curRenderOpts as any).pageData),\n            'utf8'\n          )\n        }\n      }\n      results.fromBuildExportRevalidate = (curRenderOpts as any).revalidate\n\n      if (!results.ssgNotFound) {\n        // don't attempt writing to disk if getStaticProps returned not found\n        await promises.writeFile(htmlFilepath, html, 'utf8')\n      }\n    } catch (error) {\n      console.error(\n        `\\nError occurred prerendering page \"${path}\". Read more: https://nextjs.org/docs/messages/prerender-error\\n` +\n          (isError(error) && error.stack ? error.stack : error)\n      )\n      results.error = true\n    }\n    return { ...results, duration: Date.now() - start }\n  })\n}\n"],"names":["exportPage","envConfig","require","global","__NEXT_DATA__","nextExport","parentSpanId","path","pathMap","distDir","outDir","pagesDataDir","renderOpts","buildExport","serverRuntimeConfig","subFolders","serverless","optimizeFonts","optimizeImages","optimizeCss","disableOptimizedLoading","httpAgentOptions","exportPageSpan","traceAsyncFn","start","Date","now","results","ampValidations","req","query","originalQuery","page","filePath","isDynamic","ampPath","renderAmpPath","params","updatedPath","__nextSsgPath","locale","__nextLocale","localePathResult","locales","detectedLocale","pathname","defaultLocale","hasOrigQueryValues","Object","keys","length","queryWithAutoExportWarn","Error","nonLocalizedPath","undefined","headerMocks","headers","getHeader","setHeader","hasHeader","removeHeader","getHeaderNames","url","res","statusCode","trailingSlash","endsWith","setConfig","publicRuntimeConfig","runtimeConfig","getHtmlFilename","_path","htmlFilename","pageExt","pathExt","isBuiltinPaths","some","p","isHtmlExtPath","baseDir","htmlFilepath","mkdir","recursive","renderResult","curRenderOpts","renderMethod","inAmpMode","hybridAmp","renderedDuringBuild","getStaticProps","curUrl","parse","format","Component","ComponentMod","getServerSideProps","pageConfig","ampState","ampFirst","amp","hasQuery","Boolean","hybrid","fromStatic","duration","renderReqToHTML","result","fontManifest","html","isNotFound","components","process","env","__NEXT_OPTIMIZE_FONTS","JSON","stringify","__NEXT_OPTIMIZE_IMAGES","__NEXT_OPTIMIZE_CSS","ssgNotFound","validateAmp","rawAmpHtml","ampPageName","validatorPath","validator","getInstance","validateString","errors","filter","e","severity","warnings","push","toUnchunkedString","ampSkipValidation","ampValidatorPath","ampHtmlFilename","ampBaseDir","ampHtmlFilepath","access","_","ampRenderResult","includes","ampHtml","writeFile","pageData","dataFile","replace","fromBuildExportRevalidate","revalidate","error","console","stack"],"mappings":"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"}