{"version":3,"sources":["../../build/load-jsconfig.ts"],"sourcesContent":["import path from 'path'\nimport { fileExists } from '../lib/file-exists'\nimport { NextConfigComplete } from '../server/config-shared'\nimport * as Log from './output/log'\nimport { getTypeScriptConfiguration } from '../lib/typescript/getTypeScriptConfiguration'\nimport { readFileSync } from 'fs'\nimport isError from '../lib/is-error'\nimport { codeFrameColumns } from 'next/dist/compiled/babel/code-frame'\n\nlet TSCONFIG_WARNED = false\n\nfunction parseJsonFile(filePath: string) {\n  const JSON5 = require('next/dist/compiled/json5')\n  const contents = readFileSync(filePath, 'utf8')\n\n  // Special case an empty file\n  if (contents.trim() === '') {\n    return {}\n  }\n\n  try {\n    return JSON5.parse(contents)\n  } catch (err) {\n    if (!isError(err)) throw err\n    const codeFrame = codeFrameColumns(\n      String(contents),\n      {\n        start: {\n          line: (err as Error & { lineNumber?: number }).lineNumber || 0,\n          column: (err as Error & { columnNumber?: number }).columnNumber || 0,\n        },\n      },\n      { message: err.message, highlightCode: true }\n    )\n    throw new Error(`Failed to parse \"${filePath}\":\\n${codeFrame}`)\n  }\n}\n\nexport default async function loadJsConfig(\n  dir: string,\n  config: NextConfigComplete\n) {\n  let typeScriptPath: string | undefined\n  try {\n    typeScriptPath = require.resolve('typescript', { paths: [dir] })\n  } catch (_) {}\n  const tsConfigPath = path.join(dir, config.typescript.tsconfigPath)\n  const useTypeScript = Boolean(\n    typeScriptPath && (await fileExists(tsConfigPath))\n  )\n\n  let jsConfig\n  // jsconfig is a subset of tsconfig\n  if (useTypeScript) {\n    if (\n      config.typescript.tsconfigPath !== 'tsconfig.json' &&\n      TSCONFIG_WARNED === false\n    ) {\n      TSCONFIG_WARNED = true\n      Log.info(`Using tsconfig file: ${config.typescript.tsconfigPath}`)\n    }\n\n    const ts = (await Promise.resolve(\n      require(typeScriptPath!)\n    )) as typeof import('typescript')\n    const tsConfig = await getTypeScriptConfiguration(ts, tsConfigPath, true)\n    jsConfig = { compilerOptions: tsConfig.options }\n  }\n\n  const jsConfigPath = path.join(dir, 'jsconfig.json')\n  if (!useTypeScript && (await fileExists(jsConfigPath))) {\n    jsConfig = parseJsonFile(jsConfigPath)\n  }\n\n  let resolvedBaseUrl\n  if (jsConfig?.compilerOptions?.baseUrl) {\n    resolvedBaseUrl = path.resolve(dir, jsConfig.compilerOptions.baseUrl)\n  }\n  return {\n    useTypeScript,\n    jsConfig,\n    resolvedBaseUrl,\n  }\n}\n"],"names":["loadJsConfig","Log","TSCONFIG_WARNED","parseJsonFile","filePath","JSON5","require","contents","trim","parse","err","codeFrame","String","start","line","lineNumber","column","columnNumber","message","highlightCode","Error","dir","config","jsConfig","typeScriptPath","resolve","paths","_","tsConfigPath","join","typescript","tsconfigPath","useTypeScript","Boolean","info","ts","Promise","tsConfig","compilerOptions","options","jsConfigPath","resolvedBaseUrl","baseUrl"],"mappings":";;;;kBAsC8BA,YAAY;AAtCzB,GAAM,CAAN,KAAM;AACI,GAAoB,CAApB,WAAoB;AAEnCC,GAAG,CAAHA,GAAG;AAC4B,GAA8C,CAA9C,2BAA8C;AAC5D,GAAI,CAAJ,GAAI;AACb,GAAiB,CAAjB,QAAiB;AACJ,GAAqC,CAArC,UAAqC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtE,GAAG,CAACC,eAAe,GAAG,KAAK;SAElBC,aAAa,CAACC,QAAgB,EAAE,CAAC;IACxC,KAAK,CAACC,KAAK,GAAGC,OAAO,CAAC,CAA0B;IAChD,KAAK,CAACC,QAAQ,OARa,GAAI,eAQDH,QAAQ,EAAE,CAAM;IAE9C,EAA6B,AAA7B,2BAA6B;IAC7B,EAAE,EAAEG,QAAQ,CAACC,IAAI,OAAO,CAAE,GAAE,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IAED,GAAG,CAAC,CAAC;QACH,MAAM,CAACH,KAAK,CAACI,KAAK,CAACF,QAAQ;IAC7B,CAAC,CAAC,KAAK,EAAEG,GAAG,EAAE,CAAC;QACb,EAAE,OAjBc,QAAiB,UAiBpBA,GAAG,GAAG,KAAK,CAACA,GAAG;QAC5B,KAAK,CAACC,SAAS,OAjBc,UAAqC,mBAkBhEC,MAAM,CAACL,QAAQ,GACf,CAAC;YACCM,KAAK,EAAE,CAAC;gBACNC,IAAI,EAAGJ,GAAG,CAAqCK,UAAU,IAAI,CAAC;gBAC9DC,MAAM,EAAGN,GAAG,CAAuCO,YAAY,IAAI,CAAC;YACtE,CAAC;QACH,CAAC,EACD,CAAC;YAACC,OAAO,EAAER,GAAG,CAACQ,OAAO;YAAEC,aAAa,EAAE,IAAI;QAAC,CAAC;QAE/C,KAAK,CAAC,GAAG,CAACC,KAAK,EAAE,iBAAiB,EAAEhB,QAAQ,CAAC,IAAI,EAAEO,SAAS;IAC9D,CAAC;AACH,CAAC;eAE6BX,YAAY,CACxCqB,GAAW,EACXC,MAA0B,EAC1B,CAAC;QAkCGC,GAAyB;IAjC7B,GAAG,CAACC,cAAc;IAClB,GAAG,CAAC,CAAC;QACHA,cAAc,GAAGlB,OAAO,CAACmB,OAAO,CAAC,CAAY,aAAE,CAAC;YAACC,KAAK,EAAE,CAACL;gBAAAA,GAAG;YAAA,CAAC;QAAC,CAAC;IACjE,CAAC,CAAC,KAAK,EAAEM,CAAC,EAAE,CAAC,CAAC;IACd,KAAK,CAACC,YAAY,GA9CH,KAAM,SA8CKC,IAAI,CAACR,GAAG,EAAEC,MAAM,CAACQ,UAAU,CAACC,YAAY;IAClE,KAAK,CAACC,aAAa,GAAGC,OAAO,CAC3BT,cAAc,IAAK,KAAK,KA/CD,WAAoB,aA+CPI,YAAY;IAGlD,GAAG,CAACL,QAAQ;IACZ,EAAmC,AAAnC,iCAAmC;IACnC,EAAE,EAAES,aAAa,EAAE,CAAC;QAClB,EAAE,EACAV,MAAM,CAACQ,UAAU,CAACC,YAAY,KAAK,CAAe,kBAClD7B,eAAe,KAAK,KAAK,EACzB,CAAC;YACDA,eAAe,GAAG,IAAI;YAvDhBD,GAAG,CAwDLiC,IAAI,EAAE,qBAAqB,EAAEZ,MAAM,CAACQ,UAAU,CAACC,YAAY;QACjE,CAAC;QAED,KAAK,CAACI,EAAE,GAAI,KAAK,CAACC,OAAO,CAACX,OAAO,CAC/BnB,OAAO,CAACkB,cAAc;QAExB,KAAK,CAACa,QAAQ,GAAG,KAAK,KA7DiB,2BAA8C,6BA6DnCF,EAAE,EAAEP,YAAY,EAAE,IAAI;QACxEL,QAAQ,GAAG,CAAC;YAACe,eAAe,EAAED,QAAQ,CAACE,OAAO;QAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAACC,YAAY,GArEH,KAAM,SAqEKX,IAAI,CAACR,GAAG,EAAE,CAAe;IACnD,EAAE,GAAGW,aAAa,IAAK,KAAK,KArEH,WAAoB,aAqELQ,YAAY,GAAI,CAAC;QACvDjB,QAAQ,GAAGpB,aAAa,CAACqC,YAAY;IACvC,CAAC;IAED,GAAG,CAACC,eAAe;IACnB,EAAE,EAAElB,QAAQ,aAARA,QAAQ,KAARA,IAAI,CAAJA,CAAyB,GAAzBA,IAAI,CAAJA,CAAyB,IAAzBA,GAAyB,GAAzBA,QAAQ,CAAEe,eAAe,cAAzBf,GAAyB,KAAzBA,IAAI,CAAJA,CAAyB,GAAzBA,IAAI,CAAJA,CAAyB,GAAzBA,GAAyB,CAAEmB,OAAO,EAAE,CAAC;QACvCD,eAAe,GA5EF,KAAM,SA4EIhB,OAAO,CAACJ,GAAG,EAAEE,QAAQ,CAACe,eAAe,CAACI,OAAO;IACtE,CAAC;IACD,MAAM,CAAC,CAAC;QACNV,aAAa;QACbT,QAAQ;QACRkB,eAAe;IACjB,CAAC;AACH,CAAC"}