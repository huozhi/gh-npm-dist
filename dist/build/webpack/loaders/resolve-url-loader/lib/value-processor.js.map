{"version":3,"sources":["../../../../../../build/webpack/loaders/resolve-url-loader/lib/value-processor.js"],"sourcesContent":["/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Ben Holloway\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nimport loaderUtils from 'next/dist/compiled/loader-utils2'\nimport path from 'path'\n\nfunction valueProcessor(filename, options) {\n  const URL_STATEMENT_REGEX =\n    /(url\\s*\\()\\s*(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))\\s*(\\))/g\n  const directory = path.dirname(filename)\n  const join = options.join(filename, options)\n\n  /**\n   * Process the given CSS declaration value.\n   *\n   * @param {string} value A declaration value that may or may not contain a url() statement\n   * @param {string|Iterator.<string>} candidate An absolute path that may be the correct base or an Iterator thereof\n   */\n  return function transformValue(value, candidate) {\n    // allow multiple url() values in the declaration\n    //  split by url statements and process the content\n    //  additional capture groups are needed to match quotations correctly\n    //  escaped quotations are not considered\n    return value\n      .split(URL_STATEMENT_REGEX)\n      .map((token, i, arr) => {\n        // we can get groups as undefined under certain match circumstances\n        const initialised = token || ''\n\n        // the content of the url() statement is either in group 3 or group 5\n        const mod = i % 7\n        if (mod === 3 || mod === 5) {\n          // detect quoted url and unescape backslashes\n          const before = arr[i - 1],\n            after = arr[i + 1],\n            isQuoted = before === after && (before === \"'\" || before === '\"'),\n            unescaped = isQuoted\n              ? initialised.replace(/\\\\{2}/g, '\\\\')\n              : initialised\n\n          // split into uri and query/hash and then find the absolute path to the uri\n          const split = unescaped.split(/([?#])/g),\n            uri = split[0],\n            absolute =\n              (testIsRelative(uri) && join(uri, candidate)) ||\n              (testIsAbsolute(uri) && join(uri)),\n            query = options.keepQuery ? split.slice(1).join('') : ''\n\n          // use the absolute path in absolute mode or else relative path (or default to initialised)\n          // #6 - backslashes are not legal in URI\n          if (!absolute) {\n            return initialised\n          } else if (options.absolute) {\n            return absolute.replace(/\\\\/g, '/') + query\n          } else {\n            return loaderUtils.urlToRequest(\n              path.relative(directory, absolute).replace(/\\\\/g, '/') + query\n            )\n          }\n        }\n        // everything else, including parentheses and quotation (where present) and media statements\n        else {\n          return initialised\n        }\n      })\n      .join('')\n  }\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * We also eliminate module relative (~) paths.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for relative uri\n   */\n  function testIsRelative(uri) {\n    return (\n      !!uri &&\n      loaderUtils.isUrlRequest(uri, false) &&\n      !path.isAbsolute(uri) &&\n      uri.indexOf('~') !== 0\n    )\n  }\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for absolute uri\n   */\n  function testIsAbsolute(uri) {\n    return (\n      !!uri &&\n      typeof options.root === 'string' &&\n      loaderUtils.isUrlRequest(uri, options.root) &&\n      (/^\\//.test(uri) || path.isAbsolute(uri))\n    )\n  }\n}\n\nmodule.exports = valueProcessor\n"],"names":["valueProcessor","filename","options","URL_STATEMENT_REGEX","directory","dirname","join","transformValue","value","candidate","split","map","token","i","arr","initialised","mod","before","after","isQuoted","unescaped","replace","uri","absolute","testIsRelative","testIsAbsolute","query","keepQuery","slice","urlToRequest","relative","isUrlRequest","isAbsolute","indexOf","root","test","module","exports"],"mappings":"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"}