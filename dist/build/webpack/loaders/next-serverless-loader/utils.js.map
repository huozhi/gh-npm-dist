{"version":3,"sources":["../../../../../build/webpack/loaders/next-serverless-loader/utils.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http'\nimport type { Rewrite } from '../../../../lib/load-custom-routes'\nimport type { BuildManifest } from '../../../../server/get-page-files'\nimport type { NextConfig } from '../../../../server/config'\nimport type {\n  GetServerSideProps,\n  GetStaticPaths,\n  GetStaticProps,\n} from '../../../../types'\n\nimport { format as formatUrl, UrlWithParsedQuery, parse as parseUrl } from 'url'\nimport { parse as parseQs, ParsedUrlQuery } from 'querystring'\nimport { normalizeLocalePath } from '../../../../shared/lib/i18n/normalize-locale-path'\nimport pathMatch from '../../../../shared/lib/router/utils/path-match'\nimport { getRouteRegex } from '../../../../shared/lib/router/utils/route-regex'\nimport { getRouteMatcher } from '../../../../shared/lib/router/utils/route-matcher'\nimport {\n  matchHas,\n  prepareDestination,\n} from '../../../../shared/lib/router/utils/prepare-destination'\nimport { __ApiPreviewProps } from '../../../../server/api-utils'\nimport { acceptLanguage } from '../../../../server/accept-header'\nimport { detectLocaleCookie } from '../../../../shared/lib/i18n/detect-locale-cookie'\nimport { detectDomainLocale } from '../../../../shared/lib/i18n/detect-domain-locale'\nimport { denormalizePagePath } from '../../../../server/denormalize-page-path'\nimport cookie from 'next/dist/compiled/cookie'\nimport { TEMPORARY_REDIRECT_STATUS } from '../../../../shared/lib/constants'\nimport { addRequestMeta } from '../../../../server/request-meta'\nimport { BaseNextRequest } from '../../../../server/base-http'\n\nconst getCustomRouteMatcher = pathMatch(true)\n\nexport const vercelHeader = 'x-vercel-id'\n\nexport type ServerlessHandlerCtx = {\n  page: string\n\n  pageModule: any\n  pageComponent?: any\n  pageConfig?: any\n  pageGetStaticProps?: GetStaticProps\n  pageGetStaticPaths?: GetStaticPaths\n  pageGetServerSideProps?: GetServerSideProps\n\n  appModule?: any\n  errorModule?: any\n  documentModule?: any\n  notFoundModule?: any\n\n  runtimeConfig: any\n  buildManifest?: BuildManifest\n  reactLoadableManifest?: any\n  basePath: string\n  rewrites: Rewrite[]\n  pageIsDynamic: boolean\n  generateEtags: boolean\n  distDir: string\n  buildId: string\n  escapedBuildId: string\n  assetPrefix: string\n  poweredByHeader: boolean\n  canonicalBase: string\n  encodedPreviewProps: __ApiPreviewProps\n  i18n?: NextConfig['i18n']\n}\n\nexport function getUtils({\n  page,\n  i18n,\n  basePath,\n  rewrites,\n  pageIsDynamic,\n}: {\n  page: ServerlessHandlerCtx['page']\n  i18n?: ServerlessHandlerCtx['i18n']\n  basePath: ServerlessHandlerCtx['basePath']\n  rewrites: ServerlessHandlerCtx['rewrites']\n  pageIsDynamic: ServerlessHandlerCtx['pageIsDynamic']\n}) {\n  let defaultRouteRegex: ReturnType<typeof getRouteRegex> | undefined\n  let dynamicRouteMatcher: ReturnType<typeof getRouteMatcher> | undefined\n  let defaultRouteMatches: ParsedUrlQuery | undefined\n\n  if (pageIsDynamic) {\n    defaultRouteRegex = getRouteRegex(page)\n    dynamicRouteMatcher = getRouteMatcher(defaultRouteRegex)\n    defaultRouteMatches = dynamicRouteMatcher(page) as ParsedUrlQuery\n  }\n\n  function handleRewrites(\n    req: BaseNextRequest | IncomingMessage,\n    parsedUrl: UrlWithParsedQuery\n  ) {\n    for (const rewrite of rewrites) {\n      const matcher = getCustomRouteMatcher(rewrite.source)\n      let params = matcher(parsedUrl.pathname)\n\n      if (rewrite.has && params) {\n        const hasParams = matchHas(req, rewrite.has, parsedUrl.query)\n\n        if (hasParams) {\n          Object.assign(params, hasParams)\n        } else {\n          params = false\n        }\n      }\n\n      if (params) {\n        const { parsedDestination } = prepareDestination({\n          appendParamsToQuery: true,\n          destination: rewrite.destination,\n          params: params,\n          query: parsedUrl.query,\n        })\n\n        Object.assign(parsedUrl.query, parsedDestination.query)\n        delete (parsedDestination as any).query\n\n        Object.assign(parsedUrl, parsedDestination)\n\n        let fsPathname = parsedUrl.pathname\n\n        if (basePath) {\n          fsPathname =\n            fsPathname!.replace(new RegExp(`^${basePath}`), '') || '/'\n        }\n\n        if (i18n) {\n          const destLocalePathResult = normalizeLocalePath(\n            fsPathname!,\n            i18n.locales\n          )\n          fsPathname = destLocalePathResult.pathname\n          parsedUrl.query.nextInternalLocale =\n            destLocalePathResult.detectedLocale || params.nextInternalLocale\n        }\n\n        if (fsPathname === page) {\n          break\n        }\n\n        if (pageIsDynamic && dynamicRouteMatcher) {\n          const dynamicParams = dynamicRouteMatcher(fsPathname)\n          if (dynamicParams) {\n            parsedUrl.query = {\n              ...parsedUrl.query,\n              ...dynamicParams,\n            }\n            break\n          }\n        }\n      }\n    }\n\n    return parsedUrl\n  }\n\n  function handleBasePath(\n    req: BaseNextRequest | IncomingMessage,\n    parsedUrl: UrlWithParsedQuery\n  ) {\n    // always strip the basePath if configured since it is required\n    req.url = req.url!.replace(new RegExp(`^${basePath}`), '') || '/'\n    parsedUrl.pathname =\n      parsedUrl.pathname!.replace(new RegExp(`^${basePath}`), '') || '/'\n  }\n\n  function getParamsFromRouteMatches(\n    req: BaseNextRequest | IncomingMessage,\n    renderOpts?: any,\n    detectedLocale?: string\n  ) {\n    return getRouteMatcher(\n      (function () {\n        const { groups, routeKeys } = defaultRouteRegex!\n\n        return {\n          re: {\n            // Simulate a RegExp match from the \\`req.url\\` input\n            exec: (str: string) => {\n              const obj = parseQs(str)\n              const matchesHasLocale =\n                i18n && detectedLocale && obj['1'] === detectedLocale\n\n              // favor named matches if available\n              const routeKeyNames = Object.keys(routeKeys || {})\n              const filterLocaleItem = (val: string | string[]) => {\n                if (i18n) {\n                  // locale items can be included in route-matches\n                  // for fallback SSG pages so ensure they are\n                  // filtered\n                  const isCatchAll = Array.isArray(val)\n                  const _val = isCatchAll ? val[0] : val\n\n                  if (\n                    typeof _val === 'string' &&\n                    i18n.locales.some((item) => {\n                      if (item.toLowerCase() === _val.toLowerCase()) {\n                        detectedLocale = item\n                        renderOpts.locale = detectedLocale\n                        return true\n                      }\n                      return false\n                    })\n                  ) {\n                    // remove the locale item from the match\n                    if (isCatchAll) {\n                      ;(val as string[]).splice(0, 1)\n                    }\n\n                    // the value is only a locale item and\n                    // shouldn't be added\n                    return isCatchAll ? val.length === 0 : true\n                  }\n                }\n                return false\n              }\n\n              if (routeKeyNames.every((name) => obj[name])) {\n                return routeKeyNames.reduce((prev, keyName) => {\n                  const paramName = routeKeys?.[keyName]\n\n                  if (paramName && !filterLocaleItem(obj[keyName])) {\n                    prev[groups[paramName].pos] = obj[keyName]\n                  }\n                  return prev\n                }, {} as any)\n              }\n\n              return Object.keys(obj).reduce((prev, key) => {\n                if (!filterLocaleItem(obj[key])) {\n                  let normalizedKey = key\n\n                  if (matchesHasLocale) {\n                    normalizedKey = parseInt(key, 10) - 1 + ''\n                  }\n                  return Object.assign(prev, {\n                    [normalizedKey]: obj[key],\n                  })\n                }\n                return prev\n              }, {})\n            },\n          },\n          groups,\n        }\n      })() as any\n    )(req.headers['x-now-route-matches'] as string) as ParsedUrlQuery\n  }\n\n  function interpolateDynamicPath(pathname: string, params: ParsedUrlQuery) {\n    if (!defaultRouteRegex) return pathname\n\n    for (const param of Object.keys(defaultRouteRegex.groups)) {\n      const { optional, repeat } = defaultRouteRegex.groups[param]\n      let builtParam = `[${repeat ? '...' : ''}${param}]`\n\n      if (optional) {\n        builtParam = `[${builtParam}]`\n      }\n\n      const paramIdx = pathname!.indexOf(builtParam)\n\n      if (paramIdx > -1) {\n        let paramValue: string\n\n        if (Array.isArray(params[param])) {\n          paramValue = (params[param] as string[])\n            .map((v) => v && encodeURIComponent(v))\n            .join('/')\n        } else {\n          paramValue =\n            params[param] && encodeURIComponent(params[param] as string)\n        }\n\n        pathname =\n          pathname.substr(0, paramIdx) +\n          (paramValue || '') +\n          pathname.substr(paramIdx + builtParam.length)\n      }\n    }\n\n    return pathname\n  }\n\n  function normalizeVercelUrl(\n    req: BaseNextRequest | IncomingMessage,\n    trustQuery: boolean\n  ) {\n    // make sure to normalize req.url on Vercel to strip dynamic params\n    // from the query which are added during routing\n    if (pageIsDynamic && trustQuery && defaultRouteRegex) {\n      const _parsedUrl = parseUrl(req.url!, true)\n      delete (_parsedUrl as any).search\n\n      for (const param of Object.keys(defaultRouteRegex.groups)) {\n        delete _parsedUrl.query[param]\n      }\n      req.url = formatUrl(_parsedUrl)\n    }\n  }\n\n  function normalizeDynamicRouteParams(params: ParsedUrlQuery) {\n    let hasValidParams = true\n    if (!defaultRouteRegex) return { params, hasValidParams: false }\n\n    params = Object.keys(defaultRouteRegex.groups).reduce((prev, key) => {\n      let value: string | string[] | undefined = params[key]\n\n      // if the value matches the default value we can't rely\n      // on the parsed params, this is used to signal if we need\n      // to parse x-now-route-matches or not\n      const defaultValue = defaultRouteMatches![key]\n\n      const isDefaultValue = Array.isArray(defaultValue)\n        ? defaultValue.some((defaultVal) => {\n            return Array.isArray(value)\n              ? value.some((val) => val.includes(defaultVal))\n              : value?.includes(defaultVal)\n          })\n        : value?.includes(defaultValue as string)\n\n      if (isDefaultValue || typeof value === 'undefined') {\n        hasValidParams = false\n      }\n\n      // non-provided optional values should be undefined so normalize\n      // them to undefined\n      if (\n        defaultRouteRegex!.groups[key].optional &&\n        (!value ||\n          (Array.isArray(value) &&\n            value.length === 1 &&\n            // fallback optional catch-all SSG pages have\n            // [[...paramName]] for the root path on Vercel\n            (value[0] === 'index' || value[0] === `[[...${key}]]`)))\n      ) {\n        value = undefined\n        delete params[key]\n      }\n\n      // query values from the proxy aren't already split into arrays\n      // so make sure to normalize catch-all values\n      if (\n        value &&\n        typeof value === 'string' &&\n        defaultRouteRegex!.groups[key].repeat\n      ) {\n        value = value.split('/')\n      }\n\n      if (value) {\n        prev[key] = value\n      }\n      return prev\n    }, {} as ParsedUrlQuery)\n\n    return {\n      params,\n      hasValidParams,\n    }\n  }\n\n  function handleLocale(\n    req: IncomingMessage,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery,\n    routeNoAssetPath: string,\n    shouldNotRedirect: boolean\n  ) {\n    if (!i18n) return\n    const pathname = parsedUrl.pathname || '/'\n\n    let defaultLocale = i18n.defaultLocale\n    let detectedLocale = detectLocaleCookie(req, i18n.locales)\n    let acceptPreferredLocale\n    try {\n      acceptPreferredLocale =\n        i18n.localeDetection !== false\n          ? acceptLanguage(req.headers['accept-language'], i18n.locales)\n          : detectedLocale\n    } catch (_) {\n      acceptPreferredLocale = detectedLocale\n    }\n\n    const { host } = req.headers || {}\n    // remove port from host and remove port if present\n    const hostname = host && host.split(':')[0].toLowerCase()\n\n    const detectedDomain = detectDomainLocale(i18n.domains, hostname)\n    if (detectedDomain) {\n      defaultLocale = detectedDomain.defaultLocale\n      detectedLocale = defaultLocale\n      addRequestMeta(req as any, '__nextIsLocaleDomain', true)\n    }\n\n    // if not domain specific locale use accept-language preferred\n    detectedLocale = detectedLocale || acceptPreferredLocale\n\n    let localeDomainRedirect\n    const localePathResult = normalizeLocalePath(pathname, i18n.locales)\n\n    routeNoAssetPath = normalizeLocalePath(\n      routeNoAssetPath,\n      i18n.locales\n    ).pathname\n\n    if (localePathResult.detectedLocale) {\n      detectedLocale = localePathResult.detectedLocale\n      req.url = formatUrl({\n        ...parsedUrl,\n        pathname: localePathResult.pathname,\n      })\n      addRequestMeta(req as any, '__nextStrippedLocale', true)\n      parsedUrl.pathname = localePathResult.pathname\n    }\n\n    // If a detected locale is a domain specific locale and we aren't already\n    // on that domain and path prefix redirect to it to prevent duplicate\n    // content from multiple domains\n    if (detectedDomain) {\n      const localeToCheck = localePathResult.detectedLocale\n        ? detectedLocale\n        : acceptPreferredLocale\n\n      const matchedDomain = detectDomainLocale(\n        i18n.domains,\n        undefined,\n        localeToCheck\n      )\n\n      if (matchedDomain && matchedDomain.domain !== detectedDomain.domain) {\n        localeDomainRedirect = `http${matchedDomain.http ? '' : 's'}://${\n          matchedDomain.domain\n        }/${localeToCheck === matchedDomain.defaultLocale ? '' : localeToCheck}`\n      }\n    }\n\n    const denormalizedPagePath = denormalizePagePath(pathname)\n    const detectedDefaultLocale =\n      !detectedLocale ||\n      detectedLocale.toLowerCase() === defaultLocale.toLowerCase()\n    const shouldStripDefaultLocale = false\n    // detectedDefaultLocale &&\n    // denormalizedPagePath.toLowerCase() === \\`/\\${i18n.defaultLocale.toLowerCase()}\\`\n\n    const shouldAddLocalePrefix =\n      !detectedDefaultLocale && denormalizedPagePath === '/'\n\n    detectedLocale = detectedLocale || i18n.defaultLocale\n\n    if (\n      !shouldNotRedirect &&\n      !req.headers[vercelHeader] &&\n      i18n.localeDetection !== false &&\n      (localeDomainRedirect ||\n        shouldAddLocalePrefix ||\n        shouldStripDefaultLocale)\n    ) {\n      // set the NEXT_LOCALE cookie when a user visits the default locale\n      // with the locale prefix so that they aren't redirected back to\n      // their accept-language preferred locale\n      if (shouldStripDefaultLocale && acceptPreferredLocale !== defaultLocale) {\n        const previous = res.getHeader('set-cookie')\n\n        res.setHeader('set-cookie', [\n          ...(typeof previous === 'string'\n            ? [previous]\n            : Array.isArray(previous)\n            ? previous\n            : []),\n          cookie.serialize('NEXT_LOCALE', defaultLocale, {\n            httpOnly: true,\n            path: '/',\n          }),\n        ])\n      }\n\n      res.setHeader(\n        'Location',\n        formatUrl({\n          // make sure to include any query values when redirecting\n          ...parsedUrl,\n          pathname: localeDomainRedirect\n            ? localeDomainRedirect\n            : shouldStripDefaultLocale\n            ? basePath || '/'\n            : `${basePath}/${detectedLocale}`,\n        })\n      )\n      res.statusCode = TEMPORARY_REDIRECT_STATUS\n      res.end()\n      return\n    }\n\n    detectedLocale =\n      localePathResult.detectedLocale ||\n      (detectedDomain && detectedDomain.defaultLocale) ||\n      defaultLocale\n\n    return {\n      defaultLocale,\n      detectedLocale,\n      routeNoAssetPath,\n    }\n  }\n\n  return {\n    handleLocale,\n    handleRewrites,\n    handleBasePath,\n    defaultRouteRegex,\n    normalizeVercelUrl,\n    dynamicRouteMatcher,\n    defaultRouteMatches,\n    interpolateDynamicPath,\n    getParamsFromRouteMatches,\n    normalizeDynamicRouteParams,\n  }\n}\n"],"names":["getUtils","getCustomRouteMatcher","vercelHeader","page","i18n","basePath","rewrites","pageIsDynamic","defaultRouteRegex","dynamicRouteMatcher","defaultRouteMatches","handleRewrites","req","parsedUrl","rewrite","matcher","source","params","pathname","has","hasParams","query","Object","assign","parsedDestination","appendParamsToQuery","destination","fsPathname","replace","RegExp","destLocalePathResult","locales","nextInternalLocale","detectedLocale","dynamicParams","handleBasePath","url","getParamsFromRouteMatches","renderOpts","groups","routeKeys","re","exec","str","obj","matchesHasLocale","routeKeyNames","keys","filterLocaleItem","val","isCatchAll","Array","isArray","_val","some","item","toLowerCase","locale","splice","length","every","name","reduce","prev","keyName","paramName","pos","key","normalizedKey","parseInt","headers","interpolateDynamicPath","param","optional","repeat","builtParam","paramIdx","indexOf","paramValue","map","v","encodeURIComponent","join","substr","normalizeVercelUrl","trustQuery","_parsedUrl","search","normalizeDynamicRouteParams","hasValidParams","value","defaultValue","isDefaultValue","defaultVal","includes","undefined","split","handleLocale","res","routeNoAssetPath","shouldNotRedirect","defaultLocale","acceptPreferredLocale","localeDetection","_","host","hostname","detectedDomain","domains","localeDomainRedirect","localePathResult","localeToCheck","matchedDomain","domain","http","denormalizedPagePath","detectedDefaultLocale","shouldStripDefaultLocale","shouldAddLocalePrefix","previous","getHeader","setHeader","serialize","httpOnly","path","statusCode","end"],"mappings":"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"}