{"version":3,"sources":["../../build/spinner.ts"],"sourcesContent":["import ora from 'next/dist/compiled/ora'\n\nconst dotsSpinner = {\n  frames: ['.', '..', '...'],\n  interval: 200,\n}\n\nexport default function createSpinner(\n  text: string | { prefixText: string },\n  options: ora.Options = {},\n  logFn: (...data: any[]) => void = console.log\n) {\n  let spinner: undefined | ora.Ora\n  let prefixText = text && typeof text === 'object' && text.prefixText\n\n  if (process.stdout.isTTY) {\n    spinner = ora({\n      text: typeof text === 'string' ? text : undefined,\n      prefixText: typeof prefixText === 'string' ? prefixText : undefined,\n      spinner: dotsSpinner,\n      stream: process.stdout,\n      ...options,\n    }).start()\n\n    // Add capturing of console.log/warn/error to allow pausing\n    // the spinner before logging and then restarting spinner after\n    const origLog = console.log\n    const origWarn = console.warn\n    const origError = console.error\n    const origStop = spinner.stop.bind(spinner)\n    const origStopAndPersist = spinner.stopAndPersist.bind(spinner)\n\n    const logHandle = (method: any, args: any[]) => {\n      origStop()\n      method(...args)\n      spinner!.start()\n    }\n\n    console.log = (...args: any) => logHandle(origLog, args)\n    console.warn = (...args: any) => logHandle(origWarn, args)\n    console.error = (...args: any) => logHandle(origError, args)\n\n    const resetLog = () => {\n      console.log = origLog\n      console.warn = origWarn\n      console.error = origError\n    }\n    spinner.stop = (): ora.Ora => {\n      origStop()\n      resetLog()\n      return spinner!\n    }\n    spinner.stopAndPersist = (): ora.Ora => {\n      origStopAndPersist()\n      resetLog()\n      return spinner!\n    }\n  } else if (prefixText || text) {\n    logFn(prefixText ? prefixText + '...' : text)\n  }\n\n  return spinner\n}\n"],"names":["createSpinner","dotsSpinner","frames","interval","text","options","logFn","console","log","spinner","prefixText","process","stdout","isTTY","undefined","stream","start","origLog","origWarn","warn","origError","error","origStop","stop","bind","origStopAndPersist","stopAndPersist","logHandle","method","args","resetLog"],"mappings":";;;;kBAOwBA,aAAa;AAPrB,GAAwB,CAAxB,IAAwB;;;;;;AAExC,KAAK,CAACC,WAAW,GAAG,CAAC;IACnBC,MAAM,EAAE,CAAC;QAAA,CAAG;QAAE,CAAI;QAAE,CAAK;IAAA,CAAC;IAC1BC,QAAQ,EAAE,GAAG;AACf,CAAC;SAEuBH,aAAa,CACnCI,IAAqC,EACrCC,OAAoB,GAAG,CAAC,CAAC,EACzBC,KAA+B,GAAGC,OAAO,CAACC,GAAG,EAC7C,CAAC;IACD,GAAG,CAACC,OAAO;IACX,GAAG,CAACC,UAAU,GAAGN,IAAI,IAAI,MAAM,CAACA,IAAI,KAAK,CAAQ,WAAIA,IAAI,CAACM,UAAU;IAEpE,EAAE,EAAEC,OAAO,CAACC,MAAM,CAACC,KAAK,EAAE,CAAC;QACzBJ,OAAO,OAhBK,IAAwB,UAgBtB,CAAC;YACbL,IAAI,EAAE,MAAM,CAACA,IAAI,KAAK,CAAQ,UAAGA,IAAI,GAAGU,SAAS;YACjDJ,UAAU,EAAE,MAAM,CAACA,UAAU,KAAK,CAAQ,UAAGA,UAAU,GAAGI,SAAS;YACnEL,OAAO,EAAER,WAAW;YACpBc,MAAM,EAAEJ,OAAO,CAACC,MAAM;eACnBP,OAAO;QACZ,CAAC,EAAEW,KAAK;QAER,EAA2D,AAA3D,yDAA2D;QAC3D,EAA+D,AAA/D,6DAA+D;QAC/D,KAAK,CAACC,OAAO,GAAGV,OAAO,CAACC,GAAG;QAC3B,KAAK,CAACU,QAAQ,GAAGX,OAAO,CAACY,IAAI;QAC7B,KAAK,CAACC,SAAS,GAAGb,OAAO,CAACc,KAAK;QAC/B,KAAK,CAACC,QAAQ,GAAGb,OAAO,CAACc,IAAI,CAACC,IAAI,CAACf,OAAO;QAC1C,KAAK,CAACgB,kBAAkB,GAAGhB,OAAO,CAACiB,cAAc,CAACF,IAAI,CAACf,OAAO;QAE9D,KAAK,CAACkB,SAAS,IAAIC,MAAW,EAAEC,IAAW,GAAK,CAAC;YAC/CP,QAAQ;YACRM,MAAM,IAAIC,IAAI;YACdpB,OAAO,CAAEO,KAAK;QAChB,CAAC;QAEDT,OAAO,CAACC,GAAG,OAAOqB,IAAI,GAAUF,SAAS,CAACV,OAAO,EAAEY,IAAI;;QACvDtB,OAAO,CAACY,IAAI,OAAOU,IAAI,GAAUF,SAAS,CAACT,QAAQ,EAAEW,IAAI;;QACzDtB,OAAO,CAACc,KAAK,OAAOQ,IAAI,GAAUF,SAAS,CAACP,SAAS,EAAES,IAAI;;QAE3D,KAAK,CAACC,QAAQ,OAAS,CAAC;YACtBvB,OAAO,CAACC,GAAG,GAAGS,OAAO;YACrBV,OAAO,CAACY,IAAI,GAAGD,QAAQ;YACvBX,OAAO,CAACc,KAAK,GAAGD,SAAS;QAC3B,CAAC;QACDX,OAAO,CAACc,IAAI,OAAkB,CAAC;YAC7BD,QAAQ;YACRQ,QAAQ;YACR,MAAM,CAACrB,OAAO;QAChB,CAAC;QACDA,OAAO,CAACiB,cAAc,OAAkB,CAAC;YACvCD,kBAAkB;YAClBK,QAAQ;YACR,MAAM,CAACrB,OAAO;QAChB,CAAC;IACH,CAAC,MAAM,EAAE,EAAEC,UAAU,IAAIN,IAAI,EAAE,CAAC;QAC9BE,KAAK,CAACI,UAAU,GAAGA,UAAU,GAAG,CAAK,OAAGN,IAAI;IAC9C,CAAC;IAED,MAAM,CAACK,OAAO;AAChB,CAAC"}