{"version":3,"sources":["../../lib/is-serializable-props.ts"],"sourcesContent":["import {\n  isPlainObject,\n  getObjectClassLabel,\n} from '../shared/lib/is-plain-object'\n\nconst regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/\n\nexport function isSerializableProps(\n  page: string,\n  method: string,\n  input: any\n): true {\n  if (!isPlainObject(input)) {\n    throw new SerializableError(\n      page,\n      method,\n      '',\n      `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${getObjectClassLabel(\n        input\n      )}\\`).`\n    )\n  }\n\n  function visit(visited: Map<any, string>, value: any, path: string) {\n    if (visited.has(value)) {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `Circular references cannot be expressed in JSON (references: \\`${\n          visited.get(value) || '(self)'\n        }\\`).`\n      )\n    }\n\n    visited.set(value, path)\n  }\n\n  function isSerializable(\n    refs: Map<any, string>,\n    value: any,\n    path: string\n  ): true {\n    const type = typeof value\n    if (\n      // `null` can be serialized, but not `undefined`.\n      value === null ||\n      // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n      // serialized.\n      //\n      // `object` is special-cased below, as it may represent `null`, an Array,\n      // a plain object, a class, et al.\n      type === 'boolean' ||\n      type === 'number' ||\n      type === 'string'\n    ) {\n      return true\n    }\n\n    if (type === 'undefined') {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        '`undefined` cannot be serialized as JSON. Please use `null` or omit this value.'\n      )\n    }\n\n    if (isPlainObject(value)) {\n      visit(refs, value, path)\n\n      if (\n        Object.entries(value).every(([key, nestedValue]) => {\n          const nextPath = regexpPlainIdentifier.test(key)\n            ? `${path}.${key}`\n            : `${path}[${JSON.stringify(key)}]`\n\n          const newRefs = new Map(refs)\n          return (\n            isSerializable(newRefs, key, nextPath) &&\n            isSerializable(newRefs, nestedValue, nextPath)\n          )\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Object.`\n      )\n    }\n\n    if (Array.isArray(value)) {\n      visit(refs, value, path)\n\n      if (\n        value.every((nestedValue, index) => {\n          const newRefs = new Map(refs)\n          return isSerializable(newRefs, nestedValue, `${path}[${index}]`)\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Array.`\n      )\n    }\n\n    // None of these can be expressed as JSON:\n    // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n    throw new SerializableError(\n      page,\n      method,\n      path,\n      '`' +\n        type +\n        '`' +\n        (type === 'object'\n          ? ` (\"${Object.prototype.toString.call(value)}\")`\n          : '') +\n        ' cannot be serialized as JSON. Please only return JSON serializable data types.'\n    )\n  }\n\n  return isSerializable(new Map(), input, '')\n}\n\nexport class SerializableError extends Error {\n  constructor(page: string, method: string, path: string, message: string) {\n    super(\n      path\n        ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n        : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n    )\n  }\n}\n"],"names":["isSerializableProps","regexpPlainIdentifier","page","method","input","SerializableError","visit","visited","value","path","has","get","set","isSerializable","refs","type","Object","entries","every","key","nestedValue","nextPath","test","JSON","stringify","newRefs","Map","Array","isArray","index","prototype","toString","call","Error","message"],"mappings":"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"}