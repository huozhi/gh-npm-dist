{"version":3,"sources":["../../../lib/eslint/writeDefaultConfig.ts"],"sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'next/dist/compiled/chalk'\nimport os from 'os'\nimport path from 'path'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\nimport { ConfigAvailable } from './hasEslintConfiguration'\n\nimport * as Log from '../../build/output/log'\n\nexport async function writeDefaultConfig(\n  baseDir: string,\n  { exists, emptyEslintrc, emptyPkgJsonConfig }: ConfigAvailable,\n  selectedConfig: any,\n  eslintrcFile: string | null,\n  pkgJsonPath: string | null,\n  packageJsonConfig: { eslintConfig: any } | null\n) {\n  if (!exists && emptyEslintrc && eslintrcFile) {\n    const ext = path.extname(eslintrcFile)\n\n    let newFileContent\n    if (ext === '.yaml' || ext === '.yml') {\n      newFileContent = \"extends: 'next'\"\n    } else {\n      newFileContent = CommentJson.stringify(selectedConfig, null, 2)\n\n      if (ext === '.js') {\n        newFileContent = 'module.exports = ' + newFileContent\n      }\n    }\n\n    await fs.writeFile(eslintrcFile, newFileContent + os.EOL)\n\n    Log.info(\n      `We detected an empty ESLint configuration file (${chalk.bold(\n        path.basename(eslintrcFile)\n      )}) and updated it for you!`\n    )\n  } else if (!exists && emptyPkgJsonConfig && packageJsonConfig) {\n    packageJsonConfig.eslintConfig = selectedConfig\n\n    if (pkgJsonPath)\n      await fs.writeFile(\n        pkgJsonPath,\n        CommentJson.stringify(packageJsonConfig, null, 2) + os.EOL\n      )\n\n    Log.info(\n      `We detected an empty ${chalk.bold(\n        'eslintConfig'\n      )} field in package.json and updated it for you!`\n    )\n  } else if (!exists) {\n    await fs.writeFile(\n      path.join(baseDir, '.eslintrc.json'),\n      CommentJson.stringify(selectedConfig, null, 2) + os.EOL\n    )\n\n    console.log(\n      chalk.green(\n        `We created the ${chalk.bold(\n          '.eslintrc.json'\n        )} file for you and included your selected configuration.`\n      )\n    )\n  }\n}\n"],"names":["writeDefaultConfig","CommentJson","Log","baseDir","exists","emptyEslintrc","emptyPkgJsonConfig","selectedConfig","eslintrcFile","pkgJsonPath","packageJsonConfig","ext","extname","newFileContent","stringify","writeFile","EOL","info","bold","basename","eslintConfig","join","console","log","green"],"mappings":";;;;QASsBA,kBAAkB,GAAlBA,kBAAkB;AATT,GAAI,CAAJ,GAAI;AACjB,GAA0B,CAA1B,MAA0B;AAC7B,GAAI,CAAJ,GAAI;AACF,GAAM,CAAN,KAAM;AACXC,GAAW,CAAXA,WAAW;AAGXC,GAAG,CAAHA,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;eAEOF,kBAAkB,CACtCG,OAAe,EACf,CAAC,CAACC,MAAM,GAAEC,aAAa,GAAEC,kBAAkB,EAAkB,CAAC,EAC9DC,cAAmB,EACnBC,YAA2B,EAC3BC,WAA0B,EAC1BC,iBAA+C,EAC/C,CAAC;IACD,EAAE,GAAGN,MAAM,IAAIC,aAAa,IAAIG,YAAY,EAAE,CAAC;QAC7C,KAAK,CAACG,GAAG,GAfI,KAAM,SAeFC,OAAO,CAACJ,YAAY;QAErC,GAAG,CAACK,cAAc;QAClB,EAAE,EAAEF,GAAG,KAAK,CAAO,UAAIA,GAAG,KAAK,CAAM,OAAE,CAAC;YACtCE,cAAc,GAAG,CAAiB;QACpC,CAAC,MAAM,CAAC;YACNA,cAAc,GApBRZ,WAAW,CAoBYa,SAAS,CAACP,cAAc,EAAE,IAAI,EAAE,CAAC;YAE9D,EAAE,EAAEI,GAAG,KAAK,CAAK,MAAE,CAAC;gBAClBE,cAAc,GAAG,CAAmB,qBAAGA,cAAc;YACvD,CAAC;QACH,CAAC;QAED,KAAK,CA/BsB,GAAI,UA+BtBE,SAAS,CAACP,YAAY,EAAEK,cAAc,GA7BpC,GAAI,SA6BsCG,GAAG;QAxBhDd,GAAG,CA0BPe,IAAI,EACL,gDAAgD,EAjCrC,MAA0B,SAiCmBC,IAAI,CA/BlD,KAAM,SAgCVC,QAAQ,CAACX,YAAY,GAC1B,yBAAyB;IAE/B,CAAC,MAAM,EAAE,GAAGJ,MAAM,IAAIE,kBAAkB,IAAII,iBAAiB,EAAE,CAAC;QAC9DA,iBAAiB,CAACU,YAAY,GAAGb,cAAc;QAE/C,EAAE,EAAEE,WAAW,EACb,KAAK,CA1CoB,GAAI,UA0CpBM,SAAS,CAChBN,WAAW,EAvCPR,WAAW,CAwCHa,SAAS,CAACJ,iBAAiB,EAAE,IAAI,EAAE,CAAC,IA1CzC,GAAI,SA0C4CM,GAAG;QArCtDd,GAAG,CAwCPe,IAAI,EACL,qBAAqB,EA/CV,MAA0B,SA+CRC,IAAI,CAChC,CAAc,eACd,8CAA8C;IAEpD,CAAC,MAAM,EAAE,GAAGd,MAAM,EAAE,CAAC;QACnB,KAAK,CArDsB,GAAI,UAqDtBW,SAAS,CAlDL,KAAM,SAmDZM,IAAI,CAAClB,OAAO,EAAE,CAAgB,kBAlD7BF,WAAW,CAmDLa,SAAS,CAACP,cAAc,EAAE,IAAI,EAAE,CAAC,IArDpC,GAAI,SAqDuCS,GAAG;QAGzDM,OAAO,CAACC,GAAG,CAzDG,MAA0B,SA0DhCC,KAAK,EACR,eAAe,EA3DN,MAA0B,SA2DZN,IAAI,CAC1B,CAAgB,iBAChB,uDAAuD;IAG/D,CAAC;AACH,CAAC"}