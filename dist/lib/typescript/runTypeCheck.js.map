{"version":3,"sources":["../../../lib/typescript/runTypeCheck.ts"],"sourcesContent":["import path from 'path'\nimport {\n  DiagnosticCategory,\n  getFormattedDiagnostic,\n} from './diagnosticFormatter'\nimport { getTypeScriptConfiguration } from './getTypeScriptConfiguration'\nimport { getRequiredConfiguration } from './writeConfigurationDefaults'\n\nimport { CompileError } from '../compile-error'\n\nexport interface TypeCheckResult {\n  hasWarnings: boolean\n  warnings?: string[]\n  inputFilesCount: number\n  totalFilesCount: number\n  incremental: boolean\n}\n\nexport async function runTypeCheck(\n  ts: typeof import('typescript'),\n  baseDir: string,\n  tsConfigPath: string,\n  cacheDir?: string\n): Promise<TypeCheckResult> {\n  const effectiveConfiguration = await getTypeScriptConfiguration(\n    ts,\n    tsConfigPath\n  )\n\n  if (effectiveConfiguration.fileNames.length < 1) {\n    return {\n      hasWarnings: false,\n      inputFilesCount: 0,\n      totalFilesCount: 0,\n      incremental: false,\n    }\n  }\n  const requiredConfig = getRequiredConfiguration(ts)\n\n  const options = {\n    ...effectiveConfiguration.options,\n    ...requiredConfig,\n    noEmit: true,\n  }\n\n  let program:\n    | import('typescript').Program\n    | import('typescript').BuilderProgram\n  let incremental = false\n  if (options.incremental && cacheDir) {\n    incremental = true\n    program = ts.createIncrementalProgram({\n      rootNames: effectiveConfiguration.fileNames,\n      options: {\n        ...options,\n        incremental: true,\n        tsBuildInfoFile: path.join(cacheDir, '.tsbuildinfo'),\n      },\n    })\n  } else {\n    program = ts.createProgram(effectiveConfiguration.fileNames, options)\n  }\n  const result = program.emit()\n\n  // Intended to match:\n  // - pages/test.js\n  // - pages/apples.test.js\n  // - pages/__tests__/a.js\n  //\n  // But not:\n  // - pages/contest.js\n  // - pages/other.js\n  // - pages/test/a.js\n  //\n  const regexIgnoredFile =\n    /[\\\\/]__(?:tests|mocks)__[\\\\/]|(?<=[\\\\/.])(?:spec|test)\\.[^\\\\/]+$/\n  const allDiagnostics = ts\n    .getPreEmitDiagnostics(program as import('typescript').Program)\n    .concat(result.diagnostics)\n    .filter((d) => !(d.file && regexIgnoredFile.test(d.file.fileName)))\n\n  const firstError =\n    allDiagnostics.find(\n      (d) => d.category === DiagnosticCategory.Error && Boolean(d.file)\n    ) ?? allDiagnostics.find((d) => d.category === DiagnosticCategory.Error)\n\n  if (firstError) {\n    throw new CompileError(\n      await getFormattedDiagnostic(ts, baseDir, firstError)\n    )\n  }\n\n  const warnings = await Promise.all(\n    allDiagnostics\n      .filter((d) => d.category === DiagnosticCategory.Warning)\n      .map((d) => getFormattedDiagnostic(ts, baseDir, d))\n  )\n  return {\n    hasWarnings: true,\n    warnings,\n    inputFilesCount: effectiveConfiguration.fileNames.length,\n    totalFilesCount: program.getSourceFiles().length,\n    incremental,\n  }\n}\n"],"names":["runTypeCheck","ts","baseDir","tsConfigPath","cacheDir","effectiveConfiguration","fileNames","length","hasWarnings","inputFilesCount","totalFilesCount","incremental","requiredConfig","options","noEmit","program","createIncrementalProgram","rootNames","tsBuildInfoFile","join","createProgram","result","emit","regexIgnoredFile","allDiagnostics","getPreEmitDiagnostics","concat","diagnostics","filter","d","file","test","fileName","firstError","find","category","Error","Boolean","warnings","Promise","all","Warning","map","getSourceFiles"],"mappings":"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"}