{"version":3,"sources":["../../lib/recursive-copy.ts"],"sourcesContent":["import path from 'path'\nimport { promises, constants, Dirent, Stats } from 'fs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport isError from './is-error'\n\nconst COPYFILE_EXCL = constants.COPYFILE_EXCL\n\nexport async function recursiveCopy(\n  source: string,\n  dest: string,\n  {\n    concurrency = 32,\n    overwrite = false,\n    filter = () => true,\n  }: {\n    concurrency?: number\n    overwrite?: boolean\n    filter?(filePath: string): boolean\n  } = {}\n): Promise<void> {\n  const cwdPath = process.cwd()\n  const from = path.resolve(cwdPath, source)\n  const to = path.resolve(cwdPath, dest)\n\n  const sema = new Sema(concurrency)\n\n  // deep copy the file/directory\n  async function _copy(item: string, lstats?: Stats | Dirent): Promise<void> {\n    const target = item.replace(from, to)\n\n    await sema.acquire()\n\n    if (!lstats) {\n      // after lock on first run\n      lstats = await promises.lstat(from)\n    }\n\n    // readdir & lstat do not follow symbolic links\n    // if part is a symbolic link, follow it with stat\n    let isFile = lstats.isFile()\n    let isDirectory = lstats.isDirectory()\n    if (lstats.isSymbolicLink()) {\n      const stats = await promises.stat(item)\n      isFile = stats.isFile()\n      isDirectory = stats.isDirectory()\n    }\n\n    if (isDirectory) {\n      try {\n        await promises.mkdir(target, { recursive: true })\n      } catch (err) {\n        // do not throw `folder already exists` errors\n        if (isError(err) && err.code !== 'EEXIST') {\n          throw err\n        }\n      }\n      sema.release()\n      const files = await promises.readdir(item, { withFileTypes: true })\n      await Promise.all(\n        files.map((file) => _copy(path.join(item, file.name), file))\n      )\n    } else if (\n      isFile &&\n      // before we send the path to filter\n      // we remove the base path (from) and replace \\ by / (windows)\n      filter(item.replace(from, '').replace(/\\\\/g, '/'))\n    ) {\n      await promises.copyFile(\n        item,\n        target,\n        overwrite ? undefined : COPYFILE_EXCL\n      )\n      sema.release()\n    } else {\n      sema.release()\n    }\n  }\n\n  await _copy(from)\n}\n"],"names":["recursiveCopy","COPYFILE_EXCL","source","dest","concurrency","overwrite","filter","cwdPath","process","cwd","from","resolve","to","sema","_copy","item","lstats","target","replace","acquire","lstat","isFile","isDirectory","isSymbolicLink","stats","stat","mkdir","recursive","err","code","release","files","readdir","withFileTypes","Promise","all","map","file","join","name","copyFile","undefined"],"mappings":"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"}