{"version":3,"sources":["../../lib/recursive-readdir.ts"],"sourcesContent":["import { Dirent, promises } from 'fs'\nimport { join } from 'path'\n\n/**\n * Recursively read directory\n * @param  {string} dir Directory to read\n * @param  {RegExp} filter Filter for the file name, only the name part is considered, not the full path\n * @param  {string[]=[]} arr This doesn't have to be provided, it's used for the recursion\n * @param  {string=dir`} rootDir Used to replace the initial path, only the relative path is left, it's faster than path.relative.\n * @returns Promise array holding all relative paths\n */\nexport async function recursiveReadDir(\n  dir: string,\n  filter: RegExp,\n  ignore?: RegExp,\n  arr: string[] = [],\n  rootDir: string = dir\n): Promise<string[]> {\n  const result = await promises.readdir(dir, { withFileTypes: true })\n\n  await Promise.all(\n    result.map(async (part: Dirent) => {\n      const absolutePath = join(dir, part.name)\n      if (ignore && ignore.test(part.name)) return\n\n      // readdir does not follow symbolic links\n      // if part is a symbolic link, follow it using stat\n      let isDirectory = part.isDirectory()\n      if (part.isSymbolicLink()) {\n        const stats = await promises.stat(absolutePath)\n        isDirectory = stats.isDirectory()\n      }\n\n      if (isDirectory) {\n        await recursiveReadDir(absolutePath, filter, ignore, arr, rootDir)\n        return\n      }\n\n      if (!filter.test(part.name)) {\n        return\n      }\n\n      arr.push(absolutePath.replace(rootDir, ''))\n    })\n  )\n\n  return arr.sort()\n}\n"],"names":["recursiveReadDir","dir","filter","ignore","arr","rootDir","result","readdir","withFileTypes","Promise","all","map","part","absolutePath","name","test","isDirectory","isSymbolicLink","stats","stat","push","replace","sort"],"mappings":";;;;QAWsBA,gBAAgB,GAAhBA,gBAAgB;AAXL,GAAI,CAAJ,GAAI;AAChB,GAAM,CAAN,KAAM;eAULA,gBAAgB,CACpCC,GAAW,EACXC,MAAc,EACdC,MAAe,EACfC,GAAa,GAAG,CAAC,CAAC,EAClBC,OAAe,GAAGJ,GAAG,EACF,CAAC;IACpB,KAAK,CAACK,MAAM,GAAG,KAAK,CAlBW,GAAI,UAkBLC,OAAO,CAACN,GAAG,EAAE,CAAC;QAACO,aAAa,EAAE,IAAI;IAAC,CAAC;IAElE,KAAK,CAACC,OAAO,CAACC,GAAG,CACfJ,MAAM,CAACK,GAAG,QAAQC,IAAY,GAAK,CAAC;QAClC,KAAK,CAACC,YAAY,OArBH,KAAM,OAqBKZ,GAAG,EAAEW,IAAI,CAACE,IAAI;QACxC,EAAE,EAAEX,MAAM,IAAIA,MAAM,CAACY,IAAI,CAACH,IAAI,CAACE,IAAI,GAAG,MAAM;QAE5C,EAAyC,AAAzC,uCAAyC;QACzC,EAAmD,AAAnD,iDAAmD;QACnD,GAAG,CAACE,WAAW,GAAGJ,IAAI,CAACI,WAAW;QAClC,EAAE,EAAEJ,IAAI,CAACK,cAAc,IAAI,CAAC;YAC1B,KAAK,CAACC,KAAK,GAAG,KAAK,CA7BM,GAAI,UA6BAC,IAAI,CAACN,YAAY;YAC9CG,WAAW,GAAGE,KAAK,CAACF,WAAW;QACjC,CAAC;QAED,EAAE,EAAEA,WAAW,EAAE,CAAC;YAChB,KAAK,CAAChB,gBAAgB,CAACa,YAAY,EAAEX,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAEC,OAAO;YACjE,MAAM;QACR,CAAC;QAED,EAAE,GAAGH,MAAM,CAACa,IAAI,CAACH,IAAI,CAACE,IAAI,GAAG,CAAC;YAC5B,MAAM;QACR,CAAC;QAEDV,GAAG,CAACgB,IAAI,CAACP,YAAY,CAACQ,OAAO,CAAChB,OAAO,EAAE,CAAE;IAC3C,CAAC;IAGH,MAAM,CAACD,GAAG,CAACkB,IAAI;AACjB,CAAC"}