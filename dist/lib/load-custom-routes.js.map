{"version":3,"sources":["../../lib/load-custom-routes.ts"],"sourcesContent":["import type { NextConfig } from '../server/config'\n\nimport chalk from './chalk'\nimport { parse as parseUrl } from 'url'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\nimport { escapeStringRegexp } from '../shared/lib/escape-regexp'\nimport {\n  PERMANENT_REDIRECT_STATUS,\n  TEMPORARY_REDIRECT_STATUS,\n} from '../shared/lib/constants'\nimport isError from './is-error'\n\nexport type RouteHas =\n  | {\n      type: 'header' | 'query' | 'cookie'\n      key: string\n      value?: string\n    }\n  | {\n      type: 'host'\n      key?: undefined\n      value: string\n    }\n\nexport type Rewrite = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n  has?: RouteHas[]\n}\n\nexport type Header = {\n  source: string\n  basePath?: false\n  locale?: false\n  headers: Array<{ key: string; value: string }>\n  has?: RouteHas[]\n}\n\n// internal type used for validation (not user facing)\nexport type Redirect = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n  has?: RouteHas[]\n  statusCode?: number\n  permanent?: boolean\n}\n\nexport const allowedStatusCodes = new Set([301, 302, 303, 307, 308])\nconst allowedHasTypes = new Set(['header', 'cookie', 'query', 'host'])\nconst namedGroupsRegex = /\\(\\?<([a-zA-Z][a-zA-Z0-9]*)>/g\n\nexport function getRedirectStatus(route: {\n  statusCode?: number\n  permanent?: boolean\n}): number {\n  return (\n    route.statusCode ||\n    (route.permanent ? PERMANENT_REDIRECT_STATUS : TEMPORARY_REDIRECT_STATUS)\n  )\n}\n\nexport function normalizeRouteRegex(regex: string) {\n  // clean up un-necessary escaping from regex.source which turns / into \\\\/\n  return regex.replace(/\\\\\\//g, '/')\n}\n\n// for redirects we restrict matching /_next and for all routes\n// we add an optional trailing slash at the end for easier\n// configuring between trailingSlash: true/false\nexport function modifyRouteRegex(regex: string, restrictedPaths?: string[]) {\n  if (restrictedPaths) {\n    regex = regex.replace(\n      /\\^/,\n      `^(?!${restrictedPaths\n        .map((path) => path.replace(/\\//g, '\\\\/'))\n        .join('|')})`\n    )\n  }\n  regex = regex.replace(/\\$$/, '(?:\\\\/)?$')\n  return regex\n}\n\nfunction checkRedirect(route: Redirect): {\n  invalidParts: string[]\n  hadInvalidStatus: boolean\n} {\n  const invalidParts: string[] = []\n  let hadInvalidStatus: boolean = false\n\n  if (route.statusCode && !allowedStatusCodes.has(route.statusCode)) {\n    hadInvalidStatus = true\n    invalidParts.push(`\\`statusCode\\` is not undefined or valid statusCode`)\n  }\n  if (typeof route.permanent !== 'boolean' && !route.statusCode) {\n    invalidParts.push(`\\`permanent\\` is not set to \\`true\\` or \\`false\\``)\n  }\n\n  return {\n    invalidParts,\n    hadInvalidStatus,\n  }\n}\n\nfunction checkHeader(route: Header): string[] {\n  const invalidParts: string[] = []\n\n  if (!Array.isArray(route.headers)) {\n    invalidParts.push('`headers` field must be an array')\n  } else if (route.headers.length === 0) {\n    invalidParts.push('`headers` field cannot be empty')\n  } else {\n    for (const header of route.headers) {\n      if (!header || typeof header !== 'object') {\n        invalidParts.push(\n          \"`headers` items must be object with { key: '', value: '' }\"\n        )\n        break\n      }\n      if (typeof header.key !== 'string') {\n        invalidParts.push('`key` in header item must be string')\n        break\n      }\n      if (typeof header.value !== 'string') {\n        invalidParts.push('`value` in header item must be string')\n        break\n      }\n    }\n  }\n  return invalidParts\n}\n\ntype ParseAttemptResult = {\n  error?: boolean\n  tokens?: pathToRegexp.Token[]\n  regexStr?: string\n}\n\nfunction tryParsePath(route: string, handleUrl?: boolean): ParseAttemptResult {\n  const result: ParseAttemptResult = {}\n  let routePath = route\n\n  try {\n    if (handleUrl) {\n      const parsedDestination = parseUrl(route, true)\n      routePath = `${parsedDestination.pathname!}${\n        parsedDestination.hash || ''\n      }`\n    }\n\n    // Make sure we can parse the source properly\n    result.tokens = pathToRegexp.parse(routePath)\n\n    const regex = pathToRegexp.tokensToRegexp(result.tokens)\n    result.regexStr = regex.source\n  } catch (err) {\n    // If there is an error show our error link but still show original error or a formatted one if we can\n    let errMatches\n\n    if (isError(err) && (errMatches = err.message.match(/at (\\d{0,})/))) {\n      const position = parseInt(errMatches[1], 10)\n      console.error(\n        `\\nError parsing \\`${route}\\` ` +\n          `https://nextjs.org/docs/messages/invalid-route-source\\n` +\n          `Reason: ${err.message}\\n\\n` +\n          `  ${routePath}\\n` +\n          `  ${new Array(position).fill(' ').join('')}^\\n`\n      )\n    } else {\n      console.error(\n        `\\nError parsing ${route} https://nextjs.org/docs/messages/invalid-route-source`,\n        err\n      )\n    }\n    result.error = true\n  }\n\n  return result\n}\n\nexport type RouteType = 'rewrite' | 'redirect' | 'header'\n\nfunction checkCustomRoutes(\n  routes: Redirect[] | Header[] | Rewrite[],\n  type: RouteType\n): void {\n  if (!Array.isArray(routes)) {\n    console.error(\n      `Error: ${type}s must return an array, received ${typeof routes}.\\n` +\n        `See here for more info: https://nextjs.org/docs/messages/routes-must-be-array`\n    )\n    process.exit(1)\n  }\n\n  let numInvalidRoutes = 0\n  let hadInvalidStatus = false\n  let hadInvalidHas = false\n\n  const allowedKeys = new Set<string>(['source', 'basePath', 'locale', 'has'])\n\n  if (type === 'rewrite') {\n    allowedKeys.add('destination')\n  }\n  if (type === 'redirect') {\n    allowedKeys.add('statusCode')\n    allowedKeys.add('permanent')\n    allowedKeys.add('destination')\n  }\n  if (type === 'header') {\n    allowedKeys.add('headers')\n  }\n\n  for (const route of routes) {\n    if (!route || typeof route !== 'object') {\n      console.error(\n        `The route ${JSON.stringify(\n          route\n        )} is not a valid object with \\`source\\` and \\`${\n          type === 'header' ? 'headers' : 'destination'\n        }\\``\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    if (\n      type === 'rewrite' &&\n      (route as Rewrite).basePath === false &&\n      !(\n        (route as Rewrite).destination.startsWith('http://') ||\n        (route as Rewrite).destination.startsWith('https://')\n      )\n    ) {\n      console.error(\n        `The route ${\n          (route as Rewrite).source\n        } rewrites urls outside of the basePath. Please use a destination that starts with \\`http://\\` or \\`https://\\` https://nextjs.org/docs/messages/invalid-external-rewrite`\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    const keys = Object.keys(route)\n    const invalidKeys = keys.filter((key) => !allowedKeys.has(key))\n    const invalidParts: string[] = []\n\n    if (typeof route.basePath !== 'undefined' && route.basePath !== false) {\n      invalidParts.push('`basePath` must be undefined or false')\n    }\n\n    if (typeof route.locale !== 'undefined' && route.locale !== false) {\n      invalidParts.push('`locale` must be undefined or false')\n    }\n\n    if (typeof route.has !== 'undefined' && !Array.isArray(route.has)) {\n      invalidParts.push('`has` must be undefined or valid has object')\n      hadInvalidHas = true\n    } else if (route.has) {\n      const invalidHasItems = []\n\n      for (const hasItem of route.has) {\n        let invalidHasParts = []\n\n        if (!allowedHasTypes.has(hasItem.type)) {\n          invalidHasParts.push(`invalid type \"${hasItem.type}\"`)\n        }\n        if (typeof hasItem.key !== 'string' && hasItem.type !== 'host') {\n          invalidHasParts.push(`invalid key \"${hasItem.key}\"`)\n        }\n        if (\n          typeof hasItem.value !== 'undefined' &&\n          typeof hasItem.value !== 'string'\n        ) {\n          invalidHasParts.push(`invalid value \"${hasItem.value}\"`)\n        }\n        if (typeof hasItem.value === 'undefined' && hasItem.type === 'host') {\n          invalidHasParts.push(`value is required for \"host\" type`)\n        }\n\n        if (invalidHasParts.length > 0) {\n          invalidHasItems.push(\n            `${invalidHasParts.join(', ')} for ${JSON.stringify(hasItem)}`\n          )\n        }\n      }\n\n      if (invalidHasItems.length > 0) {\n        hadInvalidHas = true\n        const itemStr = `item${invalidHasItems.length === 1 ? '' : 's'}`\n\n        console.error(\n          `Invalid \\`has\\` ${itemStr}:\\n` + invalidHasItems.join('\\n')\n        )\n        console.error()\n        invalidParts.push(`invalid \\`has\\` ${itemStr} found`)\n      }\n    }\n\n    if (!route.source) {\n      invalidParts.push('`source` is missing')\n    } else if (typeof route.source !== 'string') {\n      invalidParts.push('`source` is not a string')\n    } else if (!route.source.startsWith('/')) {\n      invalidParts.push('`source` does not start with /')\n    }\n\n    if (type === 'header') {\n      invalidParts.push(...checkHeader(route as Header))\n    } else {\n      let _route = route as Rewrite | Redirect\n      if (!_route.destination) {\n        invalidParts.push('`destination` is missing')\n      } else if (typeof _route.destination !== 'string') {\n        invalidParts.push('`destination` is not a string')\n      } else if (\n        type === 'rewrite' &&\n        !_route.destination.match(/^(\\/|https:\\/\\/|http:\\/\\/)/)\n      ) {\n        invalidParts.push(\n          '`destination` does not start with `/`, `http://`, or `https://`'\n        )\n      }\n    }\n\n    if (type === 'redirect') {\n      const result = checkRedirect(route as Redirect)\n      hadInvalidStatus = hadInvalidStatus || result.hadInvalidStatus\n      invalidParts.push(...result.invalidParts)\n    }\n\n    let sourceTokens: pathToRegexp.Token[] | undefined\n\n    if (typeof route.source === 'string' && route.source.startsWith('/')) {\n      // only show parse error if we didn't already show error\n      // for not being a string\n      const { tokens, error, regexStr } = tryParsePath(route.source)\n\n      if (error) {\n        invalidParts.push('`source` parse failed')\n      }\n\n      if (regexStr && regexStr.length > 4096) {\n        invalidParts.push('`source` exceeds max built length of 4096')\n      }\n\n      sourceTokens = tokens\n    }\n    const hasSegments = new Set<string>()\n\n    if (route.has) {\n      for (const hasItem of route.has) {\n        if (!hasItem.value && hasItem.key) {\n          hasSegments.add(hasItem.key)\n        }\n\n        if (hasItem.value) {\n          for (const match of hasItem.value.matchAll(namedGroupsRegex)) {\n            if (match[1]) {\n              hasSegments.add(match[1])\n            }\n          }\n\n          if (hasItem.type === 'host') {\n            hasSegments.add('host')\n          }\n        }\n      }\n    }\n\n    // make sure no unnamed patterns are attempted to be used in the\n    // destination as this can cause confusion and is not allowed\n    if (typeof (route as Rewrite).destination === 'string') {\n      if (\n        (route as Rewrite).destination.startsWith('/') &&\n        Array.isArray(sourceTokens)\n      ) {\n        const unnamedInDest = new Set()\n\n        for (const token of sourceTokens) {\n          if (typeof token === 'object' && typeof token.name === 'number') {\n            const unnamedIndex = new RegExp(`:${token.name}(?!\\\\d)`)\n            if ((route as Rewrite).destination.match(unnamedIndex)) {\n              unnamedInDest.add(`:${token.name}`)\n            }\n          }\n        }\n\n        if (unnamedInDest.size > 0) {\n          invalidParts.push(\n            `\\`destination\\` has unnamed params ${[...unnamedInDest].join(\n              ', '\n            )}`\n          )\n        } else {\n          const {\n            tokens: destTokens,\n            regexStr: destRegexStr,\n            error: destinationParseFailed,\n          } = tryParsePath((route as Rewrite).destination, true)\n\n          if (destRegexStr && destRegexStr.length > 4096) {\n            invalidParts.push('`destination` exceeds max built length of 4096')\n          }\n\n          if (destinationParseFailed) {\n            invalidParts.push('`destination` parse failed')\n          } else {\n            const sourceSegments = new Set(\n              sourceTokens\n                .map((item) => typeof item === 'object' && item.name)\n                .filter(Boolean)\n            )\n            const invalidDestSegments = new Set()\n\n            for (const token of destTokens!) {\n              if (\n                typeof token === 'object' &&\n                !sourceSegments.has(token.name) &&\n                !hasSegments.has(token.name as string)\n              ) {\n                invalidDestSegments.add(token.name)\n              }\n            }\n\n            if (invalidDestSegments.size) {\n              invalidParts.push(\n                `\\`destination\\` has segments not in \\`source\\` or \\`has\\` (${[\n                  ...invalidDestSegments,\n                ].join(', ')})`\n              )\n            }\n          }\n        }\n      }\n    }\n\n    const hasInvalidKeys = invalidKeys.length > 0\n    const hasInvalidParts = invalidParts.length > 0\n\n    if (hasInvalidKeys || hasInvalidParts) {\n      console.error(\n        `${invalidParts.join(', ')}${\n          invalidKeys.length\n            ? (hasInvalidParts ? ',' : '') +\n              ` invalid field${invalidKeys.length === 1 ? '' : 's'}: ` +\n              invalidKeys.join(',')\n            : ''\n        } for route ${JSON.stringify(route)}`\n      )\n      console.error()\n      numInvalidRoutes++\n    }\n  }\n\n  if (numInvalidRoutes > 0) {\n    if (hadInvalidStatus) {\n      console.error(\n        `\\nValid redirect statusCode values are ${[...allowedStatusCodes].join(\n          ', '\n        )}`\n      )\n    }\n    if (hadInvalidHas) {\n      console.error(\n        `\\nValid \\`has\\` object shape is ${JSON.stringify(\n          {\n            type: [...allowedHasTypes].join(', '),\n            key: 'the key to check for',\n            value: 'undefined or a value string to match against',\n          },\n          null,\n          2\n        )}`\n      )\n    }\n    console.error()\n    console.error(\n      `Error: Invalid ${type}${numInvalidRoutes === 1 ? '' : 's'} found`\n    )\n    process.exit(1)\n  }\n}\n\nexport interface CustomRoutes {\n  headers: Header[]\n  rewrites: {\n    fallback: Rewrite[]\n    afterFiles: Rewrite[]\n    beforeFiles: Rewrite[]\n  }\n  redirects: Redirect[]\n}\n\nfunction processRoutes<T>(\n  routes: T,\n  config: NextConfig,\n  type: 'redirect' | 'rewrite' | 'header'\n): T {\n  const _routes = routes as any as Array<{\n    source: string\n    locale?: false\n    basePath?: false\n    destination?: string\n  }>\n  const newRoutes: typeof _routes = []\n  const defaultLocales: Array<{\n    locale: string\n    base: string\n  }> = []\n\n  if (config.i18n && type === 'redirect') {\n    for (const item of config.i18n?.domains || []) {\n      defaultLocales.push({\n        locale: item.defaultLocale,\n        base: `http${item.http ? '' : 's'}://${item.domain}`,\n      })\n    }\n\n    defaultLocales.push({\n      locale: config.i18n.defaultLocale,\n      base: '',\n    })\n  }\n\n  for (const r of _routes) {\n    const srcBasePath =\n      config.basePath && r.basePath !== false ? config.basePath : ''\n    const isExternal = !r.destination?.startsWith('/')\n    const destBasePath = srcBasePath && !isExternal ? srcBasePath : ''\n\n    if (config.i18n && r.locale !== false) {\n      if (!isExternal) {\n        defaultLocales.forEach((item) => {\n          let destination\n\n          if (r.destination) {\n            destination = item.base\n              ? `${item.base}${destBasePath}${r.destination}`\n              : `${destBasePath}${r.destination}`\n          }\n\n          newRoutes.push({\n            ...r,\n            destination,\n            source: `${srcBasePath}/${item.locale}${r.source}`,\n          })\n        })\n      }\n\n      r.source = `/:nextInternalLocale(${config.i18n.locales\n        .map((locale: string) => escapeStringRegexp(locale))\n        .join('|')})${\n        r.source === '/' && !config.trailingSlash ? '' : r.source\n      }`\n\n      if (r.destination && r.destination?.startsWith('/')) {\n        r.destination = `/:nextInternalLocale${\n          r.destination === '/' && !config.trailingSlash ? '' : r.destination\n        }`\n      }\n    }\n    r.source = `${srcBasePath}${\n      r.source === '/' && srcBasePath ? '' : r.source\n    }`\n\n    if (r.destination) {\n      r.destination = `${destBasePath}${\n        r.destination === '/' && destBasePath ? '' : r.destination\n      }`\n    }\n    newRoutes.push(r)\n  }\n  return newRoutes as any as T\n}\n\nasync function loadRedirects(config: NextConfig) {\n  if (typeof config.redirects !== 'function') {\n    return []\n  }\n  let redirects = await config.redirects()\n  // check before we process the routes and after to ensure\n  // they are still valid\n  checkCustomRoutes(redirects, 'redirect')\n\n  redirects = processRoutes(redirects, config, 'redirect')\n  checkCustomRoutes(redirects, 'redirect')\n  return redirects\n}\n\nasync function loadRewrites(config: NextConfig) {\n  if (typeof config.rewrites !== 'function') {\n    return {\n      beforeFiles: [],\n      afterFiles: [],\n      fallback: [],\n    }\n  }\n  const _rewrites = await config.rewrites()\n  let beforeFiles: Rewrite[] = []\n  let afterFiles: Rewrite[] = []\n  let fallback: Rewrite[] = []\n\n  if (\n    !Array.isArray(_rewrites) &&\n    typeof _rewrites === 'object' &&\n    Object.keys(_rewrites).every(\n      (key) =>\n        key === 'beforeFiles' || key === 'afterFiles' || key === 'fallback'\n    )\n  ) {\n    beforeFiles = _rewrites.beforeFiles || []\n    afterFiles = _rewrites.afterFiles || []\n    fallback = _rewrites.fallback || []\n  } else {\n    afterFiles = _rewrites as any\n  }\n  // check before we process the routes and after to ensure\n  // they are still valid\n  checkCustomRoutes(beforeFiles, 'rewrite')\n  checkCustomRoutes(afterFiles, 'rewrite')\n  checkCustomRoutes(fallback, 'rewrite')\n\n  beforeFiles = processRoutes(beforeFiles, config, 'rewrite')\n  afterFiles = processRoutes(afterFiles, config, 'rewrite')\n  fallback = processRoutes(fallback, config, 'rewrite')\n\n  checkCustomRoutes(beforeFiles, 'rewrite')\n  checkCustomRoutes(afterFiles, 'rewrite')\n  checkCustomRoutes(fallback, 'rewrite')\n\n  return {\n    beforeFiles,\n    afterFiles,\n    fallback,\n  }\n}\n\nasync function loadHeaders(config: NextConfig) {\n  if (typeof config.headers !== 'function') {\n    return []\n  }\n  let headers = await config.headers()\n  // check before we process the routes and after to ensure\n  // they are still valid\n  checkCustomRoutes(headers, 'header')\n\n  headers = processRoutes(headers, config, 'header')\n  checkCustomRoutes(headers, 'header')\n  return headers\n}\n\nexport default async function loadCustomRoutes(\n  config: NextConfig\n): Promise<CustomRoutes> {\n  const [headers, rewrites, redirects] = await Promise.all([\n    loadHeaders(config),\n    loadRewrites(config),\n    loadRedirects(config),\n  ])\n\n  const totalRewrites =\n    rewrites.beforeFiles.length +\n    rewrites.afterFiles.length +\n    rewrites.fallback.length\n\n  const totalRoutes = headers.length + redirects.length + totalRewrites\n\n  if (totalRoutes > 1000) {\n    console.warn(\n      chalk.bold.yellow(`Warning: `) +\n        `total number of custom routes exceeds 1000, this can reduce performance. Route counts:\\n` +\n        `headers: ${headers.length}\\n` +\n        `rewrites: ${totalRewrites}\\n` +\n        `redirects: ${redirects.length}\\n` +\n        `See more info: https://nextjs.org/docs/messages/max-custom-routes-reached`\n    )\n  }\n\n  if (config.trailingSlash) {\n    redirects.unshift(\n      {\n        source: '/:file((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\\\.\\\\w+)/',\n        destination: '/:file',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect,\n      {\n        source: '/:notfile((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\\\.]+)',\n        destination: '/:notfile/',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect\n    )\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath,\n        destination: config.basePath + '/',\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  } else {\n    redirects.unshift({\n      source: '/:path+/',\n      destination: '/:path+',\n      permanent: true,\n      locale: config.i18n ? false : undefined,\n      internal: true,\n    } as Redirect)\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath + '/',\n        destination: config.basePath,\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  }\n\n  return {\n    headers,\n    rewrites,\n    redirects,\n  }\n}\n"],"names":["getRedirectStatus","normalizeRouteRegex","modifyRouteRegex","loadCustomRoutes","pathToRegexp","allowedStatusCodes","Set","allowedHasTypes","namedGroupsRegex","route","statusCode","permanent","regex","replace","restrictedPaths","map","path","join","checkRedirect","invalidParts","hadInvalidStatus","has","push","checkHeader","Array","isArray","headers","length","header","key","value","tryParsePath","handleUrl","result","routePath","parsedDestination","pathname","hash","tokens","parse","tokensToRegexp","regexStr","source","err","errMatches","message","match","position","parseInt","console","error","fill","checkCustomRoutes","routes","type","process","exit","numInvalidRoutes","hadInvalidHas","allowedKeys","add","JSON","stringify","basePath","destination","startsWith","keys","Object","invalidKeys","filter","locale","invalidHasItems","hasItem","invalidHasParts","itemStr","_route","sourceTokens","hasSegments","matchAll","unnamedInDest","token","name","unnamedIndex","RegExp","size","destTokens","destRegexStr","destinationParseFailed","sourceSegments","item","Boolean","invalidDestSegments","hasInvalidKeys","hasInvalidParts","processRoutes","config","_routes","newRoutes","defaultLocales","i18n","domains","defaultLocale","base","http","domain","r","srcBasePath","isExternal","destBasePath","forEach","locales","trailingSlash","loadRedirects","redirects","loadRewrites","rewrites","beforeFiles","afterFiles","fallback","_rewrites","every","loadHeaders","Promise","all","totalRewrites","totalRoutes","warn","bold","yellow","unshift","undefined","internal"],"mappings":";;;;QAuDgBA,iBAAiB,GAAjBA,iBAAiB;QAUjBC,mBAAmB,GAAnBA,mBAAmB;QAQnBC,gBAAgB,GAAhBA,gBAAgB;kBAqkBFC,gBAAgB;;AA5oB5B,GAAS,CAAT,MAAS;AACO,GAAK,CAAL,IAAK;AAC3BC,GAAY,CAAZA,YAAY;AACW,GAA6B,CAA7B,aAA6B;AAIzD,GAAyB,CAAzB,UAAyB;AACZ,GAAY,CAAZ,QAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCzB,KAAK,CAACC,kBAAkB,GAAG,GAAG,CAACC,GAAG,CAAC,CAAC;AAAA,OAAG;AAAE,OAAG;AAAE,OAAG;AAAE,OAAG;AAAE,OAAG;AAAA,CAAC;QAAtDD,kBAAkB,GAAlBA,kBAAkB;AAC/B,KAAK,CAACE,eAAe,GAAG,GAAG,CAACD,GAAG,CAAC,CAAC;IAAA,CAAQ;IAAE,CAAQ;IAAE,CAAO;IAAE,CAAM;AAAA,CAAC;AACrE,KAAK,CAACE,gBAAgB;SAENR,iBAAiB,CAACS,KAGjC,EAAU,CAAC;IACV,MAAM,CACJA,KAAK,CAACC,UAAU,KACfD,KAAK,CAACE,SAAS,GApDb,UAAyB,6BAAzB,UAAyB;AAsDhC,CAAC;SAEeV,mBAAmB,CAACW,KAAa,EAAE,CAAC;IAClD,EAA0E,AAA1E,wEAA0E;IAC1E,MAAM,CAACA,KAAK,CAACC,OAAO,UAAU,CAAG;AACnC,CAAC;SAKeX,gBAAgB,CAACU,KAAa,EAAEE,eAA0B,EAAE,CAAC;IAC3E,EAAE,EAAEA,eAAe,EAAE,CAAC;QACpBF,KAAK,GAAGA,KAAK,CAACC,OAAO,QAElB,IAAI,EAAEC,eAAe,CACnBC,GAAG,EAAEC,IAAI,GAAKA,IAAI,CAACH,OAAO,QAAQ,CAAK;UACvCI,IAAI,CAAC,CAAG,IAAE,CAAC;IAElB,CAAC;IACDL,KAAK,GAAGA,KAAK,CAACC,OAAO,QAAQ,CAAW;IACxC,MAAM,CAACD,KAAK;AACd,CAAC;SAEQM,aAAa,CAACT,KAAe,EAGpC,CAAC;IACD,KAAK,CAACU,YAAY,GAAa,CAAC,CAAC;IACjC,GAAG,CAACC,gBAAgB,GAAY,KAAK;IAErC,EAAE,EAAEX,KAAK,CAACC,UAAU,KAAKL,kBAAkB,CAACgB,GAAG,CAACZ,KAAK,CAACC,UAAU,GAAG,CAAC;QAClEU,gBAAgB,GAAG,IAAI;QACvBD,YAAY,CAACG,IAAI,EAAE,mDAAmD;IACxE,CAAC;IACD,EAAE,EAAE,MAAM,CAACb,KAAK,CAACE,SAAS,KAAK,CAAS,aAAKF,KAAK,CAACC,UAAU,EAAE,CAAC;QAC9DS,YAAY,CAACG,IAAI,EAAE,iDAAiD;IACtE,CAAC;IAED,MAAM,CAAC,CAAC;QACNH,YAAY;QACZC,gBAAgB;IAClB,CAAC;AACH,CAAC;SAEQG,WAAW,CAACd,KAAa,EAAY,CAAC;IAC7C,KAAK,CAACU,YAAY,GAAa,CAAC,CAAC;IAEjC,EAAE,GAAGK,KAAK,CAACC,OAAO,CAAChB,KAAK,CAACiB,OAAO,GAAG,CAAC;QAClCP,YAAY,CAACG,IAAI,CAAC,CAAkC;IACtD,CAAC,MAAM,EAAE,EAAEb,KAAK,CAACiB,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE,CAAC;QACtCR,YAAY,CAACG,IAAI,CAAC,CAAiC;IACrD,CAAC,MAAM,CAAC;QACN,GAAG,EAAE,KAAK,CAACM,MAAM,IAAInB,KAAK,CAACiB,OAAO,CAAE,CAAC;YACnC,EAAE,GAAGE,MAAM,IAAI,MAAM,CAACA,MAAM,KAAK,CAAQ,SAAE,CAAC;gBAC1CT,YAAY,CAACG,IAAI,CACf,CAA4D;gBAE9D,KAAK;YACP,CAAC;YACD,EAAE,EAAE,MAAM,CAACM,MAAM,CAACC,GAAG,KAAK,CAAQ,SAAE,CAAC;gBACnCV,YAAY,CAACG,IAAI,CAAC,CAAqC;gBACvD,KAAK;YACP,CAAC;YACD,EAAE,EAAE,MAAM,CAACM,MAAM,CAACE,KAAK,KAAK,CAAQ,SAAE,CAAC;gBACrCX,YAAY,CAACG,IAAI,CAAC,CAAuC;gBACzD,KAAK;YACP,CAAC;QACH,CAAC;IACH,CAAC;IACD,MAAM,CAACH,YAAY;AACrB,CAAC;SAQQY,YAAY,CAACtB,KAAa,EAAEuB,SAAmB,EAAsB,CAAC;IAC7E,KAAK,CAACC,MAAM,GAAuB,CAAC,CAAC;IACrC,GAAG,CAACC,SAAS,GAAGzB,KAAK;IAErB,GAAG,CAAC,CAAC;QACH,EAAE,EAAEuB,SAAS,EAAE,CAAC;YACd,KAAK,CAACG,iBAAiB,OAhJK,IAAK,QAgJE1B,KAAK,EAAE,IAAI;YAC9CyB,SAAS,MAAMC,iBAAiB,CAACC,QAAQ,GACvCD,iBAAiB,CAACE,IAAI,IAAI,CAAE;QAEhC,CAAC;QAED,EAA6C,AAA7C,2CAA6C;QAC7CJ,MAAM,CAACK,MAAM,GAtJLlC,YAAY,CAsJSmC,KAAK,CAACL,SAAS;QAE5C,KAAK,CAACtB,KAAK,GAxJHR,YAAY,CAwJOoC,cAAc,CAACP,MAAM,CAACK,MAAM;QACvDL,MAAM,CAACQ,QAAQ,GAAG7B,KAAK,CAAC8B,MAAM;IAChC,CAAC,CAAC,KAAK,EAAEC,GAAG,EAAE,CAAC;QACb,EAAsG,AAAtG,oGAAsG;QACtG,GAAG,CAACC,UAAU;QAEd,EAAE,MAxJc,QAAY,UAwJhBD,GAAG,MAAMC,UAAU,GAAGD,GAAG,CAACE,OAAO,CAACC,KAAK,kBAAkB,CAAC;YACpE,KAAK,CAACC,QAAQ,GAAGC,QAAQ,CAACJ,UAAU,CAAC,CAAC,GAAG,EAAE;YAC3CK,OAAO,CAACC,KAAK,EACV,kBAAkB,EAAEzC,KAAK,CAAC,GAAG,KAC3B,uDAAuD,KACvD,QAAQ,EAAEkC,GAAG,CAACE,OAAO,CAAC,IAAI,KAC1B,EAAE,EAAEX,SAAS,CAAC,EAAE,KAChB,EAAE,EAAE,GAAG,CAACV,KAAK,CAACuB,QAAQ,EAAEI,IAAI,CAAC,CAAG,IAAElC,IAAI,CAAC,CAAE,GAAE,GAAG;QAErD,CAAC,MAAM,CAAC;YACNgC,OAAO,CAACC,KAAK,EACV,gBAAgB,EAAEzC,KAAK,CAAC,sDAAsD,GAC/EkC,GAAG;QAEP,CAAC;QACDV,MAAM,CAACiB,KAAK,GAAG,IAAI;IACrB,CAAC;IAED,MAAM,CAACjB,MAAM;AACf,CAAC;SAIQmB,iBAAiB,CACxBC,MAAyC,EACzCC,IAAe,EACT,CAAC;IACP,EAAE,GAAG9B,KAAK,CAACC,OAAO,CAAC4B,MAAM,GAAG,CAAC;QAC3BJ,OAAO,CAACC,KAAK,EACV,OAAO,EAAEI,IAAI,CAAC,iCAAiC,EAAE,MAAM,CAACD,MAAM,CAAC,GAAG,KAChE,6EAA6E;QAElFE,OAAO,CAACC,IAAI,CAAC,CAAC;IAChB,CAAC;IAED,GAAG,CAACC,gBAAgB,GAAG,CAAC;IACxB,GAAG,CAACrC,gBAAgB,GAAG,KAAK;IAC5B,GAAG,CAACsC,aAAa,GAAG,KAAK;IAEzB,KAAK,CAACC,WAAW,GAAG,GAAG,CAACrD,GAAG,CAAS,CAAC;QAAA,CAAQ;QAAE,CAAU;QAAE,CAAQ;QAAE,CAAK;IAAA,CAAC;IAE3E,EAAE,EAAEgD,IAAI,KAAK,CAAS,UAAE,CAAC;QACvBK,WAAW,CAACC,GAAG,CAAC,CAAa;IAC/B,CAAC;IACD,EAAE,EAAEN,IAAI,KAAK,CAAU,WAAE,CAAC;QACxBK,WAAW,CAACC,GAAG,CAAC,CAAY;QAC5BD,WAAW,CAACC,GAAG,CAAC,CAAW;QAC3BD,WAAW,CAACC,GAAG,CAAC,CAAa;IAC/B,CAAC;IACD,EAAE,EAAEN,IAAI,KAAK,CAAQ,SAAE,CAAC;QACtBK,WAAW,CAACC,GAAG,CAAC,CAAS;IAC3B,CAAC;IAED,GAAG,EAAE,KAAK,CAACnD,KAAK,IAAI4C,MAAM,CAAE,CAAC;QAC3B,EAAE,GAAG5C,KAAK,IAAI,MAAM,CAACA,KAAK,KAAK,CAAQ,SAAE,CAAC;YACxCwC,OAAO,CAACC,KAAK,EACV,UAAU,EAAEW,IAAI,CAACC,SAAS,CACzBrD,KAAK,EACL,6CAA6C,EAC7C6C,IAAI,KAAK,CAAQ,UAAG,CAAS,WAAG,CAAa,aAC9C,EAAE;YAELG,gBAAgB;YAChB,QAAQ;QACV,CAAC;QAED,EAAE,EACAH,IAAI,KAAK,CAAS,YACjB7C,KAAK,CAAasD,QAAQ,KAAK,KAAK,MAElCtD,KAAK,CAAauD,WAAW,CAACC,UAAU,CAAC,CAAS,aAClDxD,KAAK,CAAauD,WAAW,CAACC,UAAU,CAAC,CAAU,aAEtD,CAAC;YACDhB,OAAO,CAACC,KAAK,EACV,UAAU,EACRzC,KAAK,CAAaiC,MAAM,CAC1B,uKAAuK;YAE1Ke,gBAAgB;YAChB,QAAQ;QACV,CAAC;QAED,KAAK,CAACS,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACzD,KAAK;QAC9B,KAAK,CAAC2D,WAAW,GAAGF,IAAI,CAACG,MAAM,EAAExC,GAAG,IAAM8B,WAAW,CAACtC,GAAG,CAACQ,GAAG;;QAC7D,KAAK,CAACV,YAAY,GAAa,CAAC,CAAC;QAEjC,EAAE,EAAE,MAAM,CAACV,KAAK,CAACsD,QAAQ,KAAK,CAAW,cAAItD,KAAK,CAACsD,QAAQ,KAAK,KAAK,EAAE,CAAC;YACtE5C,YAAY,CAACG,IAAI,CAAC,CAAuC;QAC3D,CAAC;QAED,EAAE,EAAE,MAAM,CAACb,KAAK,CAAC6D,MAAM,KAAK,CAAW,cAAI7D,KAAK,CAAC6D,MAAM,KAAK,KAAK,EAAE,CAAC;YAClEnD,YAAY,CAACG,IAAI,CAAC,CAAqC;QACzD,CAAC;QAED,EAAE,EAAE,MAAM,CAACb,KAAK,CAACY,GAAG,KAAK,CAAW,eAAKG,KAAK,CAACC,OAAO,CAAChB,KAAK,CAACY,GAAG,GAAG,CAAC;YAClEF,YAAY,CAACG,IAAI,CAAC,CAA6C;YAC/DoC,aAAa,GAAG,IAAI;QACtB,CAAC,MAAM,EAAE,EAAEjD,KAAK,CAACY,GAAG,EAAE,CAAC;YACrB,KAAK,CAACkD,eAAe,GAAG,CAAC,CAAC;YAE1B,GAAG,EAAE,KAAK,CAACC,OAAO,IAAI/D,KAAK,CAACY,GAAG,CAAE,CAAC;gBAChC,GAAG,CAACoD,eAAe,GAAG,CAAC,CAAC;gBAExB,EAAE,GAAGlE,eAAe,CAACc,GAAG,CAACmD,OAAO,CAAClB,IAAI,GAAG,CAAC;oBACvCmB,eAAe,CAACnD,IAAI,EAAE,cAAc,EAAEkD,OAAO,CAAClB,IAAI,CAAC,CAAC;gBACtD,CAAC;gBACD,EAAE,EAAE,MAAM,CAACkB,OAAO,CAAC3C,GAAG,KAAK,CAAQ,WAAI2C,OAAO,CAAClB,IAAI,KAAK,CAAM,OAAE,CAAC;oBAC/DmB,eAAe,CAACnD,IAAI,EAAE,aAAa,EAAEkD,OAAO,CAAC3C,GAAG,CAAC,CAAC;gBACpD,CAAC;gBACD,EAAE,EACA,MAAM,CAAC2C,OAAO,CAAC1C,KAAK,KAAK,CAAW,cACpC,MAAM,CAAC0C,OAAO,CAAC1C,KAAK,KAAK,CAAQ,SACjC,CAAC;oBACD2C,eAAe,CAACnD,IAAI,EAAE,eAAe,EAAEkD,OAAO,CAAC1C,KAAK,CAAC,CAAC;gBACxD,CAAC;gBACD,EAAE,EAAE,MAAM,CAAC0C,OAAO,CAAC1C,KAAK,KAAK,CAAW,cAAI0C,OAAO,CAAClB,IAAI,KAAK,CAAM,OAAE,CAAC;oBACpEmB,eAAe,CAACnD,IAAI,EAAE,iCAAiC;gBACzD,CAAC;gBAED,EAAE,EAAEmD,eAAe,CAAC9C,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC/B4C,eAAe,CAACjD,IAAI,IACfmD,eAAe,CAACxD,IAAI,CAAC,CAAI,KAAE,KAAK,EAAE4C,IAAI,CAACC,SAAS,CAACU,OAAO;gBAE/D,CAAC;YACH,CAAC;YAED,EAAE,EAAED,eAAe,CAAC5C,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC/B+B,aAAa,GAAG,IAAI;gBACpB,KAAK,CAACgB,OAAO,IAAI,IAAI,EAAEH,eAAe,CAAC5C,MAAM,KAAK,CAAC,GAAG,CAAE,IAAG,CAAG;gBAE9DsB,OAAO,CAACC,KAAK,EACV,gBAAgB,EAAEwB,OAAO,CAAC,GAAG,IAAIH,eAAe,CAACtD,IAAI,CAAC,CAAI;gBAE7DgC,OAAO,CAACC,KAAK;gBACb/B,YAAY,CAACG,IAAI,EAAE,gBAAgB,EAAEoD,OAAO,CAAC,MAAM;YACrD,CAAC;QACH,CAAC;QAED,EAAE,GAAGjE,KAAK,CAACiC,MAAM,EAAE,CAAC;YAClBvB,YAAY,CAACG,IAAI,CAAC,CAAqB;QACzC,CAAC,MAAM,EAAE,EAAE,MAAM,CAACb,KAAK,CAACiC,MAAM,KAAK,CAAQ,SAAE,CAAC;YAC5CvB,YAAY,CAACG,IAAI,CAAC,CAA0B;QAC9C,CAAC,MAAM,EAAE,GAAGb,KAAK,CAACiC,MAAM,CAACuB,UAAU,CAAC,CAAG,KAAG,CAAC;YACzC9C,YAAY,CAACG,IAAI,CAAC,CAAgC;QACpD,CAAC;QAED,EAAE,EAAEgC,IAAI,KAAK,CAAQ,SAAE,CAAC;YACtBnC,YAAY,CAACG,IAAI,IAAIC,WAAW,CAACd,KAAK;QACxC,CAAC,MAAM,CAAC;YACN,GAAG,CAACkE,MAAM,GAAGlE,KAAK;YAClB,EAAE,GAAGkE,MAAM,CAACX,WAAW,EAAE,CAAC;gBACxB7C,YAAY,CAACG,IAAI,CAAC,CAA0B;YAC9C,CAAC,MAAM,EAAE,EAAE,MAAM,CAACqD,MAAM,CAACX,WAAW,KAAK,CAAQ,SAAE,CAAC;gBAClD7C,YAAY,CAACG,IAAI,CAAC,CAA+B;YACnD,CAAC,MAAM,EAAE,EACPgC,IAAI,KAAK,CAAS,aACjBqB,MAAM,CAACX,WAAW,CAAClB,KAAK,gCACzB,CAAC;gBACD3B,YAAY,CAACG,IAAI,CACf,CAAiE;YAErE,CAAC;QACH,CAAC;QAED,EAAE,EAAEgC,IAAI,KAAK,CAAU,WAAE,CAAC;YACxB,KAAK,CAACrB,MAAM,GAAGf,aAAa,CAACT,KAAK;YAClCW,gBAAgB,GAAGA,gBAAgB,IAAIa,MAAM,CAACb,gBAAgB;YAC9DD,YAAY,CAACG,IAAI,IAAIW,MAAM,CAACd,YAAY;QAC1C,CAAC;QAED,GAAG,CAACyD,YAAY;QAEhB,EAAE,EAAE,MAAM,CAACnE,KAAK,CAACiC,MAAM,KAAK,CAAQ,WAAIjC,KAAK,CAACiC,MAAM,CAACuB,UAAU,CAAC,CAAG,KAAG,CAAC;YACrE,EAAwD,AAAxD,sDAAwD;YACxD,EAAyB,AAAzB,uBAAyB;YACzB,KAAK,CAAC,CAAC,CAAC3B,MAAM,GAAEY,KAAK,GAAET,QAAQ,EAAC,CAAC,GAAGV,YAAY,CAACtB,KAAK,CAACiC,MAAM;YAE7D,EAAE,EAAEQ,KAAK,EAAE,CAAC;gBACV/B,YAAY,CAACG,IAAI,CAAC,CAAuB;YAC3C,CAAC;YAED,EAAE,EAAEmB,QAAQ,IAAIA,QAAQ,CAACd,MAAM,GAAG,IAAI,EAAE,CAAC;gBACvCR,YAAY,CAACG,IAAI,CAAC,CAA2C;YAC/D,CAAC;YAEDsD,YAAY,GAAGtC,MAAM;QACvB,CAAC;QACD,KAAK,CAACuC,WAAW,GAAG,GAAG,CAACvE,GAAG;QAE3B,EAAE,EAAEG,KAAK,CAACY,GAAG,EAAE,CAAC;YACd,GAAG,EAAE,KAAK,CAACmD,OAAO,IAAI/D,KAAK,CAACY,GAAG,CAAE,CAAC;gBAChC,EAAE,GAAGmD,OAAO,CAAC1C,KAAK,IAAI0C,OAAO,CAAC3C,GAAG,EAAE,CAAC;oBAClCgD,WAAW,CAACjB,GAAG,CAACY,OAAO,CAAC3C,GAAG;gBAC7B,CAAC;gBAED,EAAE,EAAE2C,OAAO,CAAC1C,KAAK,EAAE,CAAC;oBAClB,GAAG,EAAE,KAAK,CAACgB,KAAK,IAAI0B,OAAO,CAAC1C,KAAK,CAACgD,QAAQ,CAACtE,gBAAgB,EAAG,CAAC;wBAC7D,EAAE,EAAEsC,KAAK,CAAC,CAAC,GAAG,CAAC;4BACb+B,WAAW,CAACjB,GAAG,CAACd,KAAK,CAAC,CAAC;wBACzB,CAAC;oBACH,CAAC;oBAED,EAAE,EAAE0B,OAAO,CAAClB,IAAI,KAAK,CAAM,OAAE,CAAC;wBAC5BuB,WAAW,CAACjB,GAAG,CAAC,CAAM;oBACxB,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,EAAgE,AAAhE,8DAAgE;QAChE,EAA6D,AAA7D,2DAA6D;QAC7D,EAAE,EAAE,MAAM,CAAEnD,KAAK,CAAauD,WAAW,KAAK,CAAQ,SAAE,CAAC;YACvD,EAAE,EACCvD,KAAK,CAAauD,WAAW,CAACC,UAAU,CAAC,CAAG,OAC7CzC,KAAK,CAACC,OAAO,CAACmD,YAAY,GAC1B,CAAC;gBACD,KAAK,CAACG,aAAa,GAAG,GAAG,CAACzE,GAAG;gBAE7B,GAAG,EAAE,KAAK,CAAC0E,KAAK,IAAIJ,YAAY,CAAE,CAAC;oBACjC,EAAE,EAAE,MAAM,CAACI,KAAK,KAAK,CAAQ,WAAI,MAAM,CAACA,KAAK,CAACC,IAAI,KAAK,CAAQ,SAAE,CAAC;wBAChE,KAAK,CAACC,YAAY,GAAG,GAAG,CAACC,MAAM,EAAE,CAAC,EAAEH,KAAK,CAACC,IAAI,CAAC,OAAO;wBACtD,EAAE,EAAGxE,KAAK,CAAauD,WAAW,CAAClB,KAAK,CAACoC,YAAY,GAAG,CAAC;4BACvDH,aAAa,CAACnB,GAAG,EAAE,CAAC,EAAEoB,KAAK,CAACC,IAAI;wBAClC,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,EAAE,EAAEF,aAAa,CAACK,IAAI,GAAG,CAAC,EAAE,CAAC;oBAC3BjE,YAAY,CAACG,IAAI,EACd,mCAAmC,EAAE,CAAC;2BAAGyD,aAAa;oBAAA,CAAC,CAAC9D,IAAI,CAC3D,CAAI;gBAGV,CAAC,MAAM,CAAC;oBACN,KAAK,CAAC,CAAC,CACLqB,MAAM,EAAE+C,UAAU,GAClB5C,QAAQ,EAAE6C,YAAY,GACtBpC,KAAK,EAAEqC,sBAAsB,IAC/B,CAAC,GAAGxD,YAAY,CAAEtB,KAAK,CAAauD,WAAW,EAAE,IAAI;oBAErD,EAAE,EAAEsB,YAAY,IAAIA,YAAY,CAAC3D,MAAM,GAAG,IAAI,EAAE,CAAC;wBAC/CR,YAAY,CAACG,IAAI,CAAC,CAAgD;oBACpE,CAAC;oBAED,EAAE,EAAEiE,sBAAsB,EAAE,CAAC;wBAC3BpE,YAAY,CAACG,IAAI,CAAC,CAA4B;oBAChD,CAAC,MAAM,CAAC;wBACN,KAAK,CAACkE,cAAc,GAAG,GAAG,CAAClF,GAAG,CAC5BsE,YAAY,CACT7D,GAAG,EAAE0E,IAAI,GAAK,MAAM,CAACA,IAAI,KAAK,CAAQ,WAAIA,IAAI,CAACR,IAAI;0BACnDZ,MAAM,CAACqB,OAAO;wBAEnB,KAAK,CAACC,mBAAmB,GAAG,GAAG,CAACrF,GAAG;wBAEnC,GAAG,EAAE,KAAK,CAAC0E,KAAK,IAAIK,UAAU,CAAG,CAAC;4BAChC,EAAE,EACA,MAAM,CAACL,KAAK,KAAK,CAAQ,YACxBQ,cAAc,CAACnE,GAAG,CAAC2D,KAAK,CAACC,IAAI,MAC7BJ,WAAW,CAACxD,GAAG,CAAC2D,KAAK,CAACC,IAAI,GAC3B,CAAC;gCACDU,mBAAmB,CAAC/B,GAAG,CAACoB,KAAK,CAACC,IAAI;4BACpC,CAAC;wBACH,CAAC;wBAED,EAAE,EAAEU,mBAAmB,CAACP,IAAI,EAAE,CAAC;4BAC7BjE,YAAY,CAACG,IAAI,EACd,2DAA2D,EAAE,CAAC;mCAC1DqE,mBAAmB;4BACxB,CAAC,CAAC1E,IAAI,CAAC,CAAI,KAAE,CAAC;wBAElB,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,KAAK,CAAC2E,cAAc,GAAGxB,WAAW,CAACzC,MAAM,GAAG,CAAC;QAC7C,KAAK,CAACkE,eAAe,GAAG1E,YAAY,CAACQ,MAAM,GAAG,CAAC;QAE/C,EAAE,EAAEiE,cAAc,IAAIC,eAAe,EAAE,CAAC;YACtC5C,OAAO,CAACC,KAAK,IACR/B,YAAY,CAACF,IAAI,CAAC,CAAI,OACvBmD,WAAW,CAACzC,MAAM,IACbkE,eAAe,GAAG,CAAG,KAAG,CAAE,MAC1B,cAAc,EAAEzB,WAAW,CAACzC,MAAM,KAAK,CAAC,GAAG,CAAE,IAAG,CAAG,GAAC,EAAE,IACvDyC,WAAW,CAACnD,IAAI,CAAC,CAAG,MACpB,CAAE,EACP,WAAW,EAAE4C,IAAI,CAACC,SAAS,CAACrD,KAAK;YAEpCwC,OAAO,CAACC,KAAK;YACbO,gBAAgB;QAClB,CAAC;IACH,CAAC;IAED,EAAE,EAAEA,gBAAgB,GAAG,CAAC,EAAE,CAAC;QACzB,EAAE,EAAErC,gBAAgB,EAAE,CAAC;YACrB6B,OAAO,CAACC,KAAK,EACV,uCAAuC,EAAE,CAAC;mBAAG7C,kBAAkB;YAAA,CAAC,CAACY,IAAI,CACpE,CAAI;QAGV,CAAC;QACD,EAAE,EAAEyC,aAAa,EAAE,CAAC;YAClBT,OAAO,CAACC,KAAK,EACV,gCAAgC,EAAEW,IAAI,CAACC,SAAS,CAC/C,CAAC;gBACCR,IAAI,EAAE,CAAC;uBAAG/C,eAAe;gBAAA,CAAC,CAACU,IAAI,CAAC,CAAI;gBACpCY,GAAG,EAAE,CAAsB;gBAC3BC,KAAK,EAAE,CAA8C;YACvD,CAAC,EACD,IAAI,EACJ,CAAC;QAGP,CAAC;QACDmB,OAAO,CAACC,KAAK;QACbD,OAAO,CAACC,KAAK,EACV,eAAe,EAAEI,IAAI,GAAGG,gBAAgB,KAAK,CAAC,GAAG,CAAE,IAAG,CAAG,GAAC,MAAM;QAEnEF,OAAO,CAACC,IAAI,CAAC,CAAC;IAChB,CAAC;AACH,CAAC;SAYQsC,aAAa,CACpBzC,MAAS,EACT0C,MAAkB,EAClBzC,IAAuC,EACpC,CAAC;IACJ,KAAK,CAAC0C,OAAO,GAAG3C,MAAM;IAMtB,KAAK,CAAC4C,SAAS,GAAmB,CAAC,CAAC;IACpC,KAAK,CAACC,cAAc,GAGf,CAAC,CAAC;IAEP,EAAE,EAAEH,MAAM,CAACI,IAAI,IAAI7C,IAAI,KAAK,CAAU,WAAE,CAAC;YACpByC,GAAW;QAA9B,GAAG,EAAE,KAAK,CAACN,IAAI,MAAIM,GAAW,GAAXA,MAAM,CAACI,IAAI,cAAXJ,GAAW,KAAXA,IAAI,CAAJA,CAAoB,GAApBA,IAAI,CAAJA,CAAoB,GAApBA,GAAW,CAAEK,OAAO,KAAI,CAAC,CAAC,CAAE,CAAC;YAC9CF,cAAc,CAAC5E,IAAI,CAAC,CAAC;gBACnBgD,MAAM,EAAEmB,IAAI,CAACY,aAAa;gBAC1BC,IAAI,GAAG,IAAI,EAAEb,IAAI,CAACc,IAAI,GAAG,CAAE,IAAG,CAAG,GAAC,GAAG,EAAEd,IAAI,CAACe,MAAM;YACpD,CAAC;QACH,CAAC;QAEDN,cAAc,CAAC5E,IAAI,CAAC,CAAC;YACnBgD,MAAM,EAAEyB,MAAM,CAACI,IAAI,CAACE,aAAa;YACjCC,IAAI,EAAE,CAAE;QACV,CAAC;IACH,CAAC;IAED,GAAG,EAAE,KAAK,CAACG,CAAC,IAAIT,OAAO,CAAE,CAAC;YAGJS,IAAa;QAFjC,KAAK,CAACC,WAAW,GACfX,MAAM,CAAChC,QAAQ,IAAI0C,CAAC,CAAC1C,QAAQ,KAAK,KAAK,GAAGgC,MAAM,CAAChC,QAAQ,GAAG,CAAE;QAChE,KAAK,CAAC4C,UAAU,MAAIF,IAAa,GAAbA,CAAC,CAACzC,WAAW,cAAbyC,IAAa,KAAbA,IAAI,CAAJA,CAAyB,GAAzBA,IAAI,CAAJA,CAAyB,GAAzBA,IAAa,CAAExC,UAAU,CAAC,CAAG;QACjD,KAAK,CAAC2C,YAAY,GAAGF,WAAW,KAAKC,UAAU,GAAGD,WAAW,GAAG,CAAE;QAElE,EAAE,EAAEX,MAAM,CAACI,IAAI,IAAIM,CAAC,CAACnC,MAAM,KAAK,KAAK,EAAE,CAAC;gBAyBjBmC,IAAa;YAxBlC,EAAE,GAAGE,UAAU,EAAE,CAAC;gBAChBT,cAAc,CAACW,OAAO,EAAEpB,IAAI,GAAK,CAAC;oBAChC,GAAG,CAACzB,WAAW;oBAEf,EAAE,EAAEyC,CAAC,CAACzC,WAAW,EAAE,CAAC;wBAClBA,WAAW,GAAGyB,IAAI,CAACa,IAAI,MAChBb,IAAI,CAACa,IAAI,GAAGM,YAAY,GAAGH,CAAC,CAACzC,WAAW,QACxC4C,YAAY,GAAGH,CAAC,CAACzC,WAAW;oBACrC,CAAC;oBAEDiC,SAAS,CAAC3E,IAAI,CAAC,CAAC;2BACXmF,CAAC;wBACJzC,WAAW;wBACXtB,MAAM,KAAKgE,WAAW,CAAC,CAAC,EAAEjB,IAAI,CAACnB,MAAM,GAAGmC,CAAC,CAAC/D,MAAM;oBAClD,CAAC;gBACH,CAAC;YACH,CAAC;YAED+D,CAAC,CAAC/D,MAAM,IAAI,qBAAqB,EAAEqD,MAAM,CAACI,IAAI,CAACW,OAAO,CACnD/F,GAAG,EAAEuD,MAAc,OApiBO,aAA6B,qBAoiBZA,MAAM;cACjDrD,IAAI,CAAC,CAAG,IAAE,CAAC,EACZwF,CAAC,CAAC/D,MAAM,KAAK,CAAG,OAAKqD,MAAM,CAACgB,aAAa,GAAG,CAAE,IAAGN,CAAC,CAAC/D,MAAM;YAG3D,EAAE,EAAE+D,CAAC,CAACzC,WAAW,MAAIyC,IAAa,GAAbA,CAAC,CAACzC,WAAW,cAAbyC,IAAa,KAAbA,IAAI,CAAJA,CAAyB,GAAzBA,IAAI,CAAJA,CAAyB,GAAzBA,IAAa,CAAExC,UAAU,CAAC,CAAG,MAAG,CAAC;gBACpDwC,CAAC,CAACzC,WAAW,IAAI,oBAAoB,EACnCyC,CAAC,CAACzC,WAAW,KAAK,CAAG,OAAK+B,MAAM,CAACgB,aAAa,GAAG,CAAE,IAAGN,CAAC,CAACzC,WAAW;YAEvE,CAAC;QACH,CAAC;QACDyC,CAAC,CAAC/D,MAAM,MAAMgE,WAAW,GACvBD,CAAC,CAAC/D,MAAM,KAAK,CAAG,MAAIgE,WAAW,GAAG,CAAE,IAAGD,CAAC,CAAC/D,MAAM;QAGjD,EAAE,EAAE+D,CAAC,CAACzC,WAAW,EAAE,CAAC;YAClByC,CAAC,CAACzC,WAAW,MAAM4C,YAAY,GAC7BH,CAAC,CAACzC,WAAW,KAAK,CAAG,MAAI4C,YAAY,GAAG,CAAE,IAAGH,CAAC,CAACzC,WAAW;QAE9D,CAAC;QACDiC,SAAS,CAAC3E,IAAI,CAACmF,CAAC;IAClB,CAAC;IACD,MAAM,CAACR,SAAS;AAClB,CAAC;eAEce,aAAa,CAACjB,MAAkB,EAAE,CAAC;IAChD,EAAE,EAAE,MAAM,CAACA,MAAM,CAACkB,SAAS,KAAK,CAAU,WAAE,CAAC;QAC3C,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IACD,GAAG,CAACA,SAAS,GAAG,KAAK,CAAClB,MAAM,CAACkB,SAAS;IACtC,EAAyD,AAAzD,uDAAyD;IACzD,EAAuB,AAAvB,qBAAuB;IACvB7D,iBAAiB,CAAC6D,SAAS,EAAE,CAAU;IAEvCA,SAAS,GAAGnB,aAAa,CAACmB,SAAS,EAAElB,MAAM,EAAE,CAAU;IACvD3C,iBAAiB,CAAC6D,SAAS,EAAE,CAAU;IACvC,MAAM,CAACA,SAAS;AAClB,CAAC;eAEcC,YAAY,CAACnB,MAAkB,EAAE,CAAC;IAC/C,EAAE,EAAE,MAAM,CAACA,MAAM,CAACoB,QAAQ,KAAK,CAAU,WAAE,CAAC;QAC1C,MAAM,CAAC,CAAC;YACNC,WAAW,EAAE,CAAC,CAAC;YACfC,UAAU,EAAE,CAAC,CAAC;YACdC,QAAQ,EAAE,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IACD,KAAK,CAACC,SAAS,GAAG,KAAK,CAACxB,MAAM,CAACoB,QAAQ;IACvC,GAAG,CAACC,WAAW,GAAc,CAAC,CAAC;IAC/B,GAAG,CAACC,UAAU,GAAc,CAAC,CAAC;IAC9B,GAAG,CAACC,QAAQ,GAAc,CAAC,CAAC;IAE5B,EAAE,GACC9F,KAAK,CAACC,OAAO,CAAC8F,SAAS,KACxB,MAAM,CAACA,SAAS,KAAK,CAAQ,WAC7BpD,MAAM,CAACD,IAAI,CAACqD,SAAS,EAAEC,KAAK,EACzB3F,GAAG,GACFA,GAAG,KAAK,CAAa,gBAAIA,GAAG,KAAK,CAAY,eAAIA,GAAG,KAAK,CAAU;OAEvE,CAAC;QACDuF,WAAW,GAAGG,SAAS,CAACH,WAAW,IAAI,CAAC,CAAC;QACzCC,UAAU,GAAGE,SAAS,CAACF,UAAU,IAAI,CAAC,CAAC;QACvCC,QAAQ,GAAGC,SAAS,CAACD,QAAQ,IAAI,CAAC,CAAC;IACrC,CAAC,MAAM,CAAC;QACND,UAAU,GAAGE,SAAS;IACxB,CAAC;IACD,EAAyD,AAAzD,uDAAyD;IACzD,EAAuB,AAAvB,qBAAuB;IACvBnE,iBAAiB,CAACgE,WAAW,EAAE,CAAS;IACxChE,iBAAiB,CAACiE,UAAU,EAAE,CAAS;IACvCjE,iBAAiB,CAACkE,QAAQ,EAAE,CAAS;IAErCF,WAAW,GAAGtB,aAAa,CAACsB,WAAW,EAAErB,MAAM,EAAE,CAAS;IAC1DsB,UAAU,GAAGvB,aAAa,CAACuB,UAAU,EAAEtB,MAAM,EAAE,CAAS;IACxDuB,QAAQ,GAAGxB,aAAa,CAACwB,QAAQ,EAAEvB,MAAM,EAAE,CAAS;IAEpD3C,iBAAiB,CAACgE,WAAW,EAAE,CAAS;IACxChE,iBAAiB,CAACiE,UAAU,EAAE,CAAS;IACvCjE,iBAAiB,CAACkE,QAAQ,EAAE,CAAS;IAErC,MAAM,CAAC,CAAC;QACNF,WAAW;QACXC,UAAU;QACVC,QAAQ;IACV,CAAC;AACH,CAAC;eAEcG,WAAW,CAAC1B,MAAkB,EAAE,CAAC;IAC9C,EAAE,EAAE,MAAM,CAACA,MAAM,CAACrE,OAAO,KAAK,CAAU,WAAE,CAAC;QACzC,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IACD,GAAG,CAACA,OAAO,GAAG,KAAK,CAACqE,MAAM,CAACrE,OAAO;IAClC,EAAyD,AAAzD,uDAAyD;IACzD,EAAuB,AAAvB,qBAAuB;IACvB0B,iBAAiB,CAAC1B,OAAO,EAAE,CAAQ;IAEnCA,OAAO,GAAGoE,aAAa,CAACpE,OAAO,EAAEqE,MAAM,EAAE,CAAQ;IACjD3C,iBAAiB,CAAC1B,OAAO,EAAE,CAAQ;IACnC,MAAM,CAACA,OAAO;AAChB,CAAC;eAE6BvB,gBAAgB,CAC5C4F,MAAkB,EACK,CAAC;IACxB,KAAK,EAAErE,OAAO,EAAEyF,QAAQ,EAAEF,SAAS,IAAI,KAAK,CAACS,OAAO,CAACC,GAAG,CAAC,CAAC;QACxDF,WAAW,CAAC1B,MAAM;QAClBmB,YAAY,CAACnB,MAAM;QACnBiB,aAAa,CAACjB,MAAM;IACtB,CAAC;IAED,KAAK,CAAC6B,aAAa,GACjBT,QAAQ,CAACC,WAAW,CAACzF,MAAM,GAC3BwF,QAAQ,CAACE,UAAU,CAAC1F,MAAM,GAC1BwF,QAAQ,CAACG,QAAQ,CAAC3F,MAAM;IAE1B,KAAK,CAACkG,WAAW,GAAGnG,OAAO,CAACC,MAAM,GAAGsF,SAAS,CAACtF,MAAM,GAAGiG,aAAa;IAErE,EAAE,EAAEC,WAAW,GAAG,IAAI,EAAE,CAAC;QACvB5E,OAAO,CAAC6E,IAAI,CA7pBE,MAAS,SA8pBfC,IAAI,CAACC,MAAM,EAAE,SAAS,MACzB,wFAAwF,KACxF,SAAS,EAAEtG,OAAO,CAACC,MAAM,CAAC,EAAE,KAC5B,UAAU,EAAEiG,aAAa,CAAC,EAAE,KAC5B,WAAW,EAAEX,SAAS,CAACtF,MAAM,CAAC,EAAE,KAChC,yEAAyE;IAEhF,CAAC;IAED,EAAE,EAAEoE,MAAM,CAACgB,aAAa,EAAE,CAAC;QACzBE,SAAS,CAACgB,OAAO,CACf,CAAC;YACCvF,MAAM,EAAE,CAA2D;YACnEsB,WAAW,EAAE,CAAQ;YACrBrD,SAAS,EAAE,IAAI;YACf2D,MAAM,EAAEyB,MAAM,CAACI,IAAI,GAAG,KAAK,GAAG+B,SAAS;YACvCC,QAAQ,EAAE,IAAI;QAChB,CAAC,EACD,CAAC;YACCzF,MAAM,EAAE,CAAyD;YACjEsB,WAAW,EAAE,CAAY;YACzBrD,SAAS,EAAE,IAAI;YACf2D,MAAM,EAAEyB,MAAM,CAACI,IAAI,GAAG,KAAK,GAAG+B,SAAS;YACvCC,QAAQ,EAAE,IAAI;QAChB,CAAC;QAEH,EAAE,EAAEpC,MAAM,CAAChC,QAAQ,EAAE,CAAC;YACpBkD,SAAS,CAACgB,OAAO,CAAC,CAAC;gBACjBvF,MAAM,EAAEqD,MAAM,CAAChC,QAAQ;gBACvBC,WAAW,EAAE+B,MAAM,CAAChC,QAAQ,GAAG,CAAG;gBAClCpD,SAAS,EAAE,IAAI;gBACfoD,QAAQ,EAAE,KAAK;gBACfO,MAAM,EAAEyB,MAAM,CAACI,IAAI,GAAG,KAAK,GAAG+B,SAAS;gBACvCC,QAAQ,EAAE,IAAI;YAChB,CAAC;QACH,CAAC;IACH,CAAC,MAAM,CAAC;QACNlB,SAAS,CAACgB,OAAO,CAAC,CAAC;YACjBvF,MAAM,EAAE,CAAU;YAClBsB,WAAW,EAAE,CAAS;YACtBrD,SAAS,EAAE,IAAI;YACf2D,MAAM,EAAEyB,MAAM,CAACI,IAAI,GAAG,KAAK,GAAG+B,SAAS;YACvCC,QAAQ,EAAE,IAAI;QAChB,CAAC;QACD,EAAE,EAAEpC,MAAM,CAAChC,QAAQ,EAAE,CAAC;YACpBkD,SAAS,CAACgB,OAAO,CAAC,CAAC;gBACjBvF,MAAM,EAAEqD,MAAM,CAAChC,QAAQ,GAAG,CAAG;gBAC7BC,WAAW,EAAE+B,MAAM,CAAChC,QAAQ;gBAC5BpD,SAAS,EAAE,IAAI;gBACfoD,QAAQ,EAAE,KAAK;gBACfO,MAAM,EAAEyB,MAAM,CAACI,IAAI,GAAG,KAAK,GAAG+B,SAAS;gBACvCC,QAAQ,EAAE,IAAI;YAChB,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,CAAC;QACNzG,OAAO;QACPyF,QAAQ;QACRF,SAAS;IACX,CAAC;AACH,CAAC"}