{"version":3,"sources":["../../client/route-announcer.tsx"],"sourcesContent":["import React from 'react'\nimport { useRouter } from './router'\n\nexport function RouteAnnouncer() {\n  const { asPath } = useRouter()\n  const [routeAnnouncement, setRouteAnnouncement] = React.useState('')\n\n  // Only announce the path change, but not for the first load because screen\n  // reader will do that automatically.\n  const initialPathLoaded = React.useRef(false)\n\n  // Every time the path changes, announce the new page’s title following this\n  // priority: first the document title (from head), otherwise the first h1, or\n  // if none of these exist, then the pathname from the URL. This methodology is\n  // inspired by Marcy Sutton’s accessible client routing user testing. More\n  // information can be found here:\n  // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/\n  React.useEffect(\n    () => {\n      if (!initialPathLoaded.current) {\n        initialPathLoaded.current = true\n        return\n      }\n\n      if (document.title) {\n        setRouteAnnouncement(document.title)\n      } else {\n        const pageHeader = document.querySelector('h1')\n        const content = pageHeader?.innerText ?? pageHeader?.textContent\n\n        setRouteAnnouncement(content || asPath)\n      }\n    },\n    // TODO: switch to pathname + query object of dynamic route requirements\n    [asPath]\n  )\n\n  return (\n    <p\n      aria-live=\"assertive\" // Make the announcement immediately.\n      id=\"__next-route-announcer__\"\n      role=\"alert\"\n      style={{\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: '1px',\n        margin: '-1px',\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        width: '1px',\n\n        // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n        whiteSpace: 'nowrap',\n        wordWrap: 'normal',\n      }}\n    >\n      {routeAnnouncement}\n    </p>\n  )\n}\n\nexport default RouteAnnouncer\n"],"names":["RouteAnnouncer","asPath","routeAnnouncement","setRouteAnnouncement","useState","initialPathLoaded","useRef","useEffect","current","document","title","pageHeader","querySelector","content","innerText","textContent","p","aria-live","id","role","style","border","clip","height","margin","overflow","padding","position","width","whiteSpace","wordWrap"],"mappings":";;;;QAGgBA,cAAc,GAAdA,cAAc;;AAHZ,GAAO,CAAP,MAAO;AACC,GAAU,CAAV,OAAU;;;;;;SAEpBA,cAAc,GAAG,CAAC;IAChC,KAAK,CAAC,CAAC,CAACC,MAAM,EAAC,CAAC,OAHQ,OAAU;IAIlC,KAAK,EAAEC,iBAAiB,EAAEC,oBAAoB,IAL9B,MAAO,SAKiCC,QAAQ,CAAC,CAAE;IAEnE,EAA2E,AAA3E,yEAA2E;IAC3E,EAAqC,AAArC,mCAAqC;IACrC,KAAK,CAACC,iBAAiB,GATP,MAAO,SASSC,MAAM,CAAC,KAAK;IAE5C,EAA4E,AAA5E,4EAA8E;IAC5E,EAA2E,AAA7E,2EAA6E;IAC7E,EAA8E,AAA9E,4EAA8E;IAC9E,EAA0E,AAA1E,0EAA0E;IAC1E,EAAiC,AAAjC,+BAAiC;IACjC,EAAmF,AAAnF,iFAAmF;IAhBnE,MAAO,SAiBjBC,SAAS,KACP,CAAC;QACL,EAAE,GAAGF,iBAAiB,CAACG,OAAO,EAAE,CAAC;YAC/BH,iBAAiB,CAACG,OAAO,GAAG,IAAI;YAChC,MAAM;QACR,CAAC;QAED,EAAE,EAAEC,QAAQ,CAACC,KAAK,EAAE,CAAC;YACnBP,oBAAoB,CAACM,QAAQ,CAACC,KAAK;QACrC,CAAC,MAAM,CAAC;YACN,KAAK,CAACC,UAAU,GAAGF,QAAQ,CAACG,aAAa,CAAC,CAAI;gBAC9BD,GAAqB;YAArC,KAAK,CAACE,OAAO,IAAGF,GAAqB,GAArBA,UAAU,aAAVA,UAAU,KAAVA,IAAI,CAAJA,CAAqB,GAArBA,IAAI,CAAJA,CAAqB,GAArBA,UAAU,CAAEG,SAAS,cAArBH,GAAqB,cAArBA,GAAqB,GAAIA,UAAU,aAAVA,UAAU,KAAVA,IAAI,CAAJA,CAAuB,GAAvBA,IAAI,CAAJA,CAAuB,GAAvBA,UAAU,CAAEI,WAAW;YAEhEZ,oBAAoB,CAACU,OAAO,IAAIZ,MAAM;QACxC,CAAC;IACH,CAAC,EACD,EAAwE,AAAxE,sEAAwE;IACxE,CAACA;QAAAA,MAAM;IAAA,CAAC;IAGV,MAAM,eArCU,MAAO,uBAsCpBe,CAAC;QACAC,CAAS,YAAC,CAAW,UAAC,CAAqC,AAArC,EAAqC,AAArC,mCAAqC;;QAC3DC,EAAE,EAAC,CAA0B;QAC7BC,IAAI,EAAC,CAAO;QACZC,KAAK,EAAE,CAAC;YACNC,MAAM,EAAE,CAAC;YACTC,IAAI,EAAE,CAAe;YACrBC,MAAM,EAAE,CAAK;YACbC,MAAM,EAAE,CAAM;YACdC,QAAQ,EAAE,CAAQ;YAClBC,OAAO,EAAE,CAAC;YACVC,QAAQ,EAAE,CAAU;YACpBC,KAAK,EAAE,CAAK;YAEZ,EAAwF,AAAxF,sFAAwF;YACxFC,UAAU,EAAE,CAAQ;YACpBC,QAAQ,EAAE,CAAQ;QACpB,CAAC;OAEA5B,iBAAiB;AAGxB,CAAC;eAEcF,cAAc"}