{"version":3,"sources":["../../../../../shared/lib/router/utils/sorted-routes.ts"],"sourcesContent":["class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\nexport function getSortedRoutes(normalizedPages: string[]): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n"],"names":["getSortedRoutes","UrlNode","insert","urlPath","_insert","split","filter","Boolean","smoosh","_smoosh","prefix","childrenPaths","children","keys","sort","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","map","c","get","reduce","prev","curr","push","placeholder","r","slice","Error","unshift","urlPaths","slugNames","isCatchAll","length","nextSegment","startsWith","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","replace","has","set","Map","normalizedPages","root","pagePath"],"mappings":"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"}