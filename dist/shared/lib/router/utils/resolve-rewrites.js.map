{"version":3,"sources":["../../../../../shared/lib/router/utils/resolve-rewrites.ts"],"sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport { matchHas, prepareDestination } from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: {\n    beforeFiles: Rewrite[]\n    afterFiles: Rewrite[]\n    fallback: Rewrite[]\n  },\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n  externalDest?: boolean\n} {\n  let matchedPage = false\n  let externalDest = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  const handleRewrite = (rewrite: Rewrite) => {\n    const matcher = customRouteMatcher(rewrite.source)\n    let params = matcher(parsedAs.pathname)\n\n    if (rewrite.has && params) {\n      const hasParams = matchHas(\n        {\n          headers: {\n            host: document.location.hostname,\n          },\n          cookies: document.cookie\n            .split('; ')\n            .reduce<Record<string, string>>((acc, item) => {\n              const [key, ...value] = item.split('=')\n              acc[key] = value.join('=')\n              return acc\n            }, {}),\n        } as any,\n        rewrite.has,\n        parsedAs.query\n      )\n\n      if (hasParams) {\n        Object.assign(params, hasParams)\n      } else {\n        params = false\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        externalDest = true\n        return true\n      }\n      const destRes = prepareDestination({\n        appendParamsToQuery: true,\n        destination: rewrite.destination,\n        params: params,\n        query: query,\n      })\n      parsedAs = destRes.parsedDestination\n      asPath = destRes.newUrl\n      Object.assign(query, destRes.parsedDestination.query)\n\n      fsPathname = removePathTrailingSlash(\n        normalizeLocalePath(delBasePath(asPath), locales).pathname\n      )\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true\n        resolvedHref = fsPathname\n        return true\n      }\n\n      // check if we match a dynamic-route, if so we break the rewrites chain\n      resolvedHref = resolveHref(fsPathname)\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true\n        return true\n      }\n    }\n  }\n  let finished = false\n\n  for (let i = 0; i < rewrites.beforeFiles.length; i++) {\n    // we don't end after match in beforeFiles to allow\n    // continuing through all beforeFiles rewrites\n    finished = handleRewrite(rewrites.beforeFiles[i]) || false\n  }\n  matchedPage = pages.includes(fsPathname)\n\n  if (!matchedPage) {\n    if (!finished) {\n      for (let i = 0; i < rewrites.afterFiles.length; i++) {\n        if (handleRewrite(rewrites.afterFiles[i])) {\n          finished = true\n          break\n        }\n      }\n    }\n\n    // check dynamic route before processing fallback rewrites\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname)\n      matchedPage = pages.includes(resolvedHref)\n      finished = matchedPage\n    }\n\n    if (!finished) {\n      for (let i = 0; i < rewrites.fallback.length; i++) {\n        if (handleRewrite(rewrites.fallback[i])) {\n          finished = true\n          break\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n    externalDest,\n  }\n}\n"],"names":["resolveRewrites","customRouteMatcher","asPath","pages","rewrites","query","resolveHref","locales","matchedPage","externalDest","parsedAs","fsPathname","pathname","resolvedHref","handleRewrite","rewrite","matcher","source","params","has","hasParams","headers","host","document","location","hostname","cookies","cookie","split","reduce","acc","item","key","value","join","Object","assign","destination","destRes","appendParamsToQuery","parsedDestination","newUrl","includes","finished","i","beforeFiles","length","afterFiles","fallback"],"mappings":"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"}