{"version":3,"sources":["../../../shared/lib/post-process.ts"],"sourcesContent":["import { escapeStringRegexp } from './escape-regexp'\nimport { parse, HTMLElement } from 'next/dist/compiled/node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\n// const MIDDLEWARE_TIME_BUDGET = parseInt(process.env.__POST_PROCESS_MIDDLEWARE_TIME_BUDGET || '', 10) || 10\nconst MAXIMUM_IMAGE_PRELOADS = 2\nconst IMAGE_PRELOAD_SIZE_THRESHOLD = 2500\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n  optimizeImages: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\ninterface PostProcessMiddleware {\n  inspect: (originalDom: HTMLElement, options: renderOptions) => any\n  mutate: (markup: string, data: any, options: renderOptions) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(middleware: PostProcessMiddleware) {\n    // let timer = Date.now()\n    const inspectData = middleware.inspect(root, data)\n    document = await middleware.mutate(document, inspectData, data)\n    // timer = Date.now() - timer\n    // if (timer > MIDDLEWARE_TIME_BUDGET) {\n    // TODO: Identify a correct upper limit for the postprocess step\n    // and add a warning to disable the optimization\n    // }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(middlewareRegistry[i].middleware)\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement, options: renderOptions) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    const fontDefinitions: (string | undefined)[][] = []\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some(({ url }) => {\n            const dataHref = tag.getAttribute('data-href')\n            return dataHref ? dataHref.startsWith(url) : false\n          })\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        const nonce = element.getAttribute('nonce')\n\n        if (url) {\n          fontDefinitions.push([url, nonce])\n        }\n      })\n\n    return fontDefinitions\n  }\n  mutate = async (\n    markup: string,\n    fontDefinitions: string[][],\n    options: renderOptions\n  ) => {\n    let result = markup\n    let preconnectUrls = new Set<string>()\n\n    if (!options.getFontDefinition) {\n      return markup\n    }\n\n    fontDefinitions.forEach((fontDef) => {\n      const [url, nonce] = fontDef\n      const fallBackLinkTag = `<link rel=\"stylesheet\" href=\"${url}\"/>`\n      if (\n        result.indexOf(`<style data-href=\"${url}\">`) > -1 ||\n        result.indexOf(fallBackLinkTag) > -1\n      ) {\n        // The font is already optimized and probably the response is cached\n        return\n      }\n      const fontContent = options.getFontDefinition\n        ? options.getFontDefinition(url as string)\n        : null\n      if (!fontContent) {\n        /**\n         * In case of unreachable font definitions, fallback to default link tag.\n         */\n        result = result.replace('</head>', `${fallBackLinkTag}</head>`)\n      } else {\n        const nonceStr = nonce ? ` nonce=\"${nonce}\"` : ''\n        result = result.replace(\n          '</head>',\n          `<style data-href=\"${url}\"${nonceStr}>${fontContent}</style></head>`\n        )\n\n        // Remove inert font tag\n        const escapedUrl = url\n          .replace(/&/g, '&amp;')\n          .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        const fontRegex = new RegExp(\n          `<link[^>]*data-href=\"${escapedUrl}\"[^>]*/>`\n        )\n        result = result.replace(fontRegex, '')\n\n        const provider = OPTIMIZED_FONT_PROVIDERS.find((p) =>\n          url.startsWith(p.url)\n        )\n\n        if (provider) {\n          preconnectUrls.add(provider.preconnect)\n        }\n      }\n    })\n\n    let preconnectTag = ''\n    preconnectUrls.forEach((url) => {\n      preconnectTag += `<link rel=\"preconnect\" href=\"${url}\" crossorigin />`\n    })\n\n    result = result.replace(\n      '<meta name=\"next-font-preconnect\"/>',\n      preconnectTag\n    )\n\n    return result\n  }\n}\n\nclass ImageOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement) {\n    const imgPreloads = []\n    const imgElements = originalDom.querySelectorAll('img')\n    let eligibleImages: Array<HTMLElement> = []\n    for (let i = 0; i < imgElements.length; i++) {\n      if (isImgEligible(imgElements[i])) {\n        eligibleImages.push(imgElements[i])\n      }\n      if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n        break\n      }\n    }\n\n    for (const imgEl of eligibleImages) {\n      const src = imgEl.getAttribute('src')\n      if (src) {\n        imgPreloads.push(src)\n      }\n    }\n\n    return imgPreloads\n  }\n  mutate = async (markup: string, imgPreloads: string[]) => {\n    let result = markup\n    let imagePreloadTags = imgPreloads\n      .filter((imgHref) => !preloadTagAlreadyExists(markup, imgHref))\n      .reduce(\n        (acc, imgHref) =>\n          acc + `<link rel=\"preload\" href=\"${imgHref}\" as=\"image\"/>`,\n        ''\n      )\n    return result.replace('<meta name=\"next-image-preload\"/>', imagePreloadTags)\n  }\n}\n\nfunction isImgEligible(imgElement: HTMLElement): boolean {\n  let imgSrc = imgElement.getAttribute('src')\n  return (\n    !!imgSrc &&\n    sourceIsSupportedType(imgSrc) &&\n    imageIsNotTooSmall(imgElement) &&\n    imageIsNotHidden(imgElement)\n  )\n}\n\nfunction preloadTagAlreadyExists(html: string, href: string) {\n  const escapedHref = escapeStringRegexp(href)\n  const regex = new RegExp(`<link[^>]*href[^>]*${escapedHref}`)\n  return html.match(regex)\n}\n\nfunction imageIsNotTooSmall(imgElement: HTMLElement): boolean {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (\n    !(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))\n  ) {\n    return true\n  }\n  try {\n    const heightAttr = imgElement.getAttribute('height')\n    const widthAttr = imgElement.getAttribute('width')\n    if (!heightAttr || !widthAttr) {\n      return true\n    }\n\n    if (\n      parseInt(heightAttr) * parseInt(widthAttr) <=\n      IMAGE_PRELOAD_SIZE_THRESHOLD\n    ) {\n      return false\n    }\n  } catch (err) {\n    return true\n  }\n  return true\n}\n\n// Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\nfunction imageIsNotHidden(imgElement: HTMLElement): boolean {\n  let activeElement = imgElement\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false\n    }\n    activeElement = activeElement.parentNode as HTMLElement\n  }\n  return true\n}\n\n// Currently only filters out svg images--could be made more specific in the future.\nfunction sourceIsSupportedType(imgSrc: string): boolean {\n  return !imgSrc.includes('.svg')\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nregisterPostProcessor(\n  'Preload Images',\n  new ImageOptimizerMiddleware(),\n  // @ts-ignore\n  (options) => options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES\n)\n\nexport default processHTML\n"],"names":["MAXIMUM_IMAGE_PRELOADS","IMAGE_PRELOAD_SIZE_THRESHOLD","middlewareRegistry","registerPostProcessor","name","middleware","condition","push","processHTML","html","data","options","root","document","callMiddleWare","inspectData","inspect","mutate","i","length","FontOptimizerMiddleware","originalDom","getFontDefinition","fontDefinitions","querySelectorAll","filter","tag","getAttribute","hasAttribute","some","url","dataHref","startsWith","forEach","element","nonce","markup","result","preconnectUrls","Set","fontDef","fallBackLinkTag","indexOf","fontContent","replace","nonceStr","escapedUrl","fontRegex","RegExp","provider","find","p","add","preconnect","preconnectTag","ImageOptimizerMiddleware","imgPreloads","imgElements","eligibleImages","isImgEligible","imgEl","src","imagePreloadTags","imgHref","preloadTagAlreadyExists","reduce","acc","imgElement","imgSrc","sourceIsSupportedType","imageIsNotTooSmall","imageIsNotHidden","href","escapedHref","regex","match","heightAttr","widthAttr","parseInt","err","activeElement","parentNode","includes","optimizeFonts","process","env","__NEXT_OPTIMIZE_FONTS","optimizeImages","__NEXT_OPTIMIZE_IMAGES"],"mappings":"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"}