{"version":3,"sources":["../../../../shared/lib/i18n/normalize-locale-path.ts"],"sourcesContent":["export interface PathLocale {\n  detectedLocale?: string\n  pathname: string\n}\n\n/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */\nexport function normalizeLocalePath(\n  pathname: string,\n  locales?: string[]\n): PathLocale {\n  let detectedLocale: string | undefined\n  // first item will be empty string from splitting at first char\n  const pathnameParts = pathname.split('/')\n\n  ;(locales || []).some((locale) => {\n    if (\n      pathnameParts[1] &&\n      pathnameParts[1].toLowerCase() === locale.toLowerCase()\n    ) {\n      detectedLocale = locale\n      pathnameParts.splice(1, 1)\n      pathname = pathnameParts.join('/') || '/'\n      return true\n    }\n    return false\n  })\n\n  return {\n    pathname,\n    detectedLocale,\n  }\n}\n"],"names":["normalizeLocalePath","pathname","locales","detectedLocale","pathnameParts","split","some","locale","toLowerCase","splice","join"],"mappings":";;;;QAcgBA,mBAAmB,GAAnBA,mBAAmB;SAAnBA,mBAAmB,CACjCC,QAAgB,EAChBC,OAAkB,EACN,CAAC;IACb,GAAG,CAACC,cAAc;IAClB,EAA+D,AAA/D,6DAA+D;IAC/D,KAAK,CAACC,aAAa,GAAGH,QAAQ,CAACI,KAAK,CAAC,CAAG;KAEtCH,OAAO,IAAI,CAAC,CAAC,EAAEI,IAAI,EAAEC,MAAM,GAAK,CAAC;QACjC,EAAE,EACAH,aAAa,CAAC,CAAC,KACfA,aAAa,CAAC,CAAC,EAAEI,WAAW,OAAOD,MAAM,CAACC,WAAW,IACrD,CAAC;YACDL,cAAc,GAAGI,MAAM;YACvBH,aAAa,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC;YACzBR,QAAQ,GAAGG,aAAa,CAACM,IAAI,CAAC,CAAG,OAAK,CAAG;YACzC,MAAM,CAAC,IAAI;QACb,CAAC;QACD,MAAM,CAAC,KAAK;IACd,CAAC;IAED,MAAM,CAAC,CAAC;QACNT,QAAQ;QACRE,cAAc;IAChB,CAAC;AACH,CAAC"}